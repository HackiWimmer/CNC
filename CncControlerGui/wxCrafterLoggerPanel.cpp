//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterLoggerPanel.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterLoggerPanel.h"


// Declare the bitmap loading function
extern void wxC3D63InitBitmapResources();

static bool bBitmapLoaded = false;


CncLoggerViewBase::CncLoggerViewBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC3D63InitBitmapResources();
        bBitmapLoaded = true;
    }
    this->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    wxFlexGridSizer* flexGridSizer52 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer52->SetFlexibleDirection( wxBOTH );
    flexGridSizer52->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer52->AddGrowableCol(0);
    flexGridSizer52->AddGrowableRow(0);
    this->SetSizer(flexGridSizer52);
    
    wxFlexGridSizer* flexGridSizer42 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer42->SetFlexibleDirection( wxBOTH );
    flexGridSizer42->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer42->AddGrowableCol(1);
    flexGridSizer42->AddGrowableRow(0);
    
    flexGridSizer52->Add(flexGridSizer42, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer48 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer48->SetFlexibleDirection( wxBOTH );
    flexGridSizer48->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer42->Add(flexGridSizer48, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btCncStartupLogger = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-jump-today")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btCncStartupLogger->SetToolTip(_("Show Cnc Startup Trace"));
    m_btCncStartupLogger->SetValue(false);
    
    flexGridSizer48->Add(m_btCncStartupLogger, 0, wxALL, WXC_FROM_DIP(1));
    m_btCncStartupLogger->SetMinSize(wxSize(26,26));
    
    m_btCncStandardLogger = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("pencil-add")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btCncStandardLogger->SetToolTip(_("Show Cnc Standard Trace"));
    m_btCncStandardLogger->SetValue(true);
    
    flexGridSizer48->Add(m_btCncStandardLogger, 0, wxALL, WXC_FROM_DIP(1));
    m_btCncStandardLogger->SetMinSize(wxSize(26,26));
    
    m_loggerBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_loggerBook->SetName(wxT("m_loggerBook"));
    m_loggerBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer42->Add(m_loggerBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelStartup = new wxPanel(m_loggerBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_loggerBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_loggerBook->AddPage(m_panelStartup, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer68 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer68->SetFlexibleDirection( wxBOTH );
    flexGridSizer68->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer68->AddGrowableCol(0);
    flexGridSizer68->AddGrowableRow(0);
    m_panelStartup->SetSizer(flexGridSizer68);
    
    m_startupLoggerPlaceholder = new wxPanel(m_panelStartup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStartup, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_startupLoggerPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer68->Add(m_startupLoggerPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelStandard = new wxPanel(m_loggerBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_loggerBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_loggerBook->AddPage(m_panelStandard, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3->SetFlexibleDirection( wxBOTH );
    flexGridSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3->AddGrowableCol(0);
    flexGridSizer3->AddGrowableRow(0);
    m_panelStandard->SetSizer(flexGridSizer3);
    
    m_standardLoggerPlaceholder = new wxPanel(m_panelStandard, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStandard, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_standardLoggerPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer3->Add(m_standardLoggerPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer7 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer7->SetFlexibleDirection( wxBOTH );
    flexGridSizer7->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer42->Add(flexGridSizer7, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer29 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer29->SetFlexibleDirection( wxBOTH );
    flexGridSizer29->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer29, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer29->Add(26, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_btClear = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("clean")), wxLEFT);
    m_btClear->SetBitmapMargins(2,2);
    #endif
    m_btClear->SetToolTip(_("Clear Logger"));
    
    flexGridSizer29->Add(m_btClear, 0, wxALL, WXC_FROM_DIP(1));
    m_btClear->SetMinSize(wxSize(26,26));
    
    m_staticLine20 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7->Add(m_staticLine20, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer26 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer26->SetFlexibleDirection( wxBOTH );
    flexGridSizer26->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer26, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btCopy = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCopy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxLEFT);
    m_btCopy->SetBitmapMargins(2,2);
    #endif
    m_btCopy->SetToolTip(_("Copy visible Logger content to Clipborad"));
    
    flexGridSizer26->Add(m_btCopy, 0, wxALL, WXC_FROM_DIP(1));
    m_btCopy->SetMinSize(wxSize(26,26));
    
    m_btCopyAll = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCopyAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxLEFT);
    m_btCopyAll->SetBitmapMargins(2,2);
    #endif
    m_btCopyAll->SetToolTip(_("Copy complete Logger content to Clipborad"));
    
    flexGridSizer26->Add(m_btCopyAll, 0, wxALL, WXC_FROM_DIP(1));
    m_btCopyAll->SetMinSize(wxSize(26,26));
    
    m_staticLine18 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7->Add(m_staticLine18, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer25 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer25->SetFlexibleDirection( wxBOTH );
    flexGridSizer25->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer25, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btSave = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btSave->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save.1")), wxLEFT);
    m_btSave->SetBitmapMargins(2,2);
    #endif
    m_btSave->SetToolTip(_("Save visible Logger content  to Clipborad"));
    
    flexGridSizer25->Add(m_btSave, 0, wxALL, WXC_FROM_DIP(1));
    m_btSave->SetMinSize(wxSize(26,26));
    
    m_btSaveAll = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btSaveAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save_all")), wxLEFT);
    m_btSaveAll->SetBitmapMargins(2,2);
    #endif
    m_btSaveAll->SetToolTip(_("Save complete Logger content  to Clipborad"));
    
    flexGridSizer25->Add(m_btSaveAll, 0, wxALL, WXC_FROM_DIP(1));
    m_btSaveAll->SetMinSize(wxSize(26,26));
    
    m_staticLine16 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7->Add(m_staticLine16, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer24 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer24->SetFlexibleDirection( wxBOTH );
    flexGridSizer24->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer24, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btView = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btView->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-calendar-week")), wxLEFT);
    m_btView->SetBitmapMargins(2,2);
    #endif
    m_btView->SetToolTip(_("View visible Logger content as Text"));
    
    flexGridSizer24->Add(m_btView, 0, wxALL, WXC_FROM_DIP(1));
    m_btView->SetMinSize(wxSize(26,26));
    
    m_btViewAll = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btViewAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-calendar-month")), wxLEFT);
    m_btViewAll->SetBitmapMargins(2,2);
    #endif
    m_btViewAll->SetToolTip(_("View complete Logger content as Text"));
    
    flexGridSizer24->Add(m_btViewAll, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewAll->SetMinSize(wxSize(26,26));
    
    m_staticLine35 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7->Add(m_staticLine35, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer33 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer33->SetFlexibleDirection( wxBOTH );
    flexGridSizer33->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7->Add(flexGridSizer33, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer33->Add(29, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_btLoggerOnDemand = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("lightbulb-off")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btLoggerOnDemand->SetToolTip(_("Show Logger on demand"));
    m_btLoggerOnDemand->SetValue(true);
    
    flexGridSizer33->Add(m_btLoggerOnDemand, 0, wxALL, WXC_FROM_DIP(1));
    m_btLoggerOnDemand->SetMinSize(wxSize(26,26));
    
    m_staticLine64 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer52->Add(m_staticLine64, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer55 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer55->SetFlexibleDirection( wxBOTH );
    flexGridSizer55->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer55->AddGrowableCol(2);
    flexGridSizer55->AddGrowableRow(0);
    
    flexGridSizer52->Add(flexGridSizer55, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticBitmap57 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("dialog-information (2)")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    m_staticBitmap57->SetToolTip(_("Trace Information"));
    
    flexGridSizer55->Add(m_staticBitmap57, 0, wxALL, WXC_FROM_DIP(6));
    
    m_timePlaceholder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(70,24)), wxTAB_TRAVERSAL);
    m_timePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer55->Add(m_timePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_timePlaceholder->SetMinSize(wxSize(70,24));
    
    m_tracePlaceholder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,24)), wxTAB_TRAVERSAL);
    m_tracePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer55->Add(m_tracePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_tracePlaceholder->SetMinSize(wxSize(-1,24));
    
    wxFlexGridSizer* flexGridSizer60 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer60->SetFlexibleDirection( wxBOTH );
    flexGridSizer60->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer55->Add(flexGridSizer60, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btClearTraceHistory = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearTraceHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("clean")), wxLEFT);
    m_btClearTraceHistory->SetBitmapMargins(2,2);
    #endif
    m_btClearTraceHistory->SetToolTip(_("Clear Trace history"));
    
    flexGridSizer60->Add(m_btClearTraceHistory, 0, wxALL, WXC_FROM_DIP(1));
    m_btClearTraceHistory->SetMinSize(wxSize(26,26));
    
    m_btShowTraceHistory = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btShowTraceHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-calendar-month")), wxLEFT);
    m_btShowTraceHistory->SetBitmapMargins(2,2);
    #endif
    m_btShowTraceHistory->SetToolTip(_("View complete Trace history"));
    
    flexGridSizer60->Add(m_btShowTraceHistory, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowTraceHistory->SetMinSize(wxSize(26,26));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    SetName(wxT("CncLoggerViewBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btCncStartupLogger->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSelectStartupLogger), NULL, this);
    m_btCncStandardLogger->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSelectStandardLogger), NULL, this);
    m_btClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onClear), NULL, this);
    m_btCopy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onCopy), NULL, this);
    m_btCopyAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onCopyAll), NULL, this);
    m_btSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSave), NULL, this);
    m_btSaveAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSaveAll), NULL, this);
    m_btView->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onView), NULL, this);
    m_btViewAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onViewAll), NULL, this);
    m_btLoggerOnDemand->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onToggleShowOnDemand), NULL, this);
    m_btClearTraceHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onClearTraceHistory), NULL, this);
    m_btShowTraceHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onViewTraceHistory), NULL, this);
    
}

CncLoggerViewBase::~CncLoggerViewBase()
{
    m_btCncStartupLogger->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSelectStartupLogger), NULL, this);
    m_btCncStandardLogger->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSelectStandardLogger), NULL, this);
    m_btClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onClear), NULL, this);
    m_btCopy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onCopy), NULL, this);
    m_btCopyAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onCopyAll), NULL, this);
    m_btSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSave), NULL, this);
    m_btSaveAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onSaveAll), NULL, this);
    m_btView->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onView), NULL, this);
    m_btViewAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onViewAll), NULL, this);
    m_btLoggerOnDemand->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onToggleShowOnDemand), NULL, this);
    m_btClearTraceHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onClearTraceHistory), NULL, this);
    m_btShowTraceHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncLoggerViewBase::onViewTraceHistory), NULL, this);
    
}
