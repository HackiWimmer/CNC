//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterGamePort.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterGamePort.h"


// Declare the bitmap loading function
extern void wxC81CCInitBitmapResources();

static bool bBitmapLoaded = false;


CncGamepadControllerStateBase::CncGamepadControllerStateBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer5802 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5802->SetFlexibleDirection( wxBOTH );
    flexGridSizer5802->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5802->AddGrowableCol(0);
    flexGridSizer5802->AddGrowableRow(0);
    this->SetSizer(flexGridSizer5802);
    
    wxFlexGridSizer* flexGridSizer5821 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5821->SetFlexibleDirection( wxBOTH );
    flexGridSizer5821->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5821->AddGrowableCol(0);
    flexGridSizer5821->AddGrowableRow(0);
    
    flexGridSizer5802->Add(flexGridSizer5821, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_listbook7478 = new wxListbook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_listbook7478->SetName(wxT("m_listbook7478"));
    wxImageList* m_listbook7478_il = new wxImageList(16, 16);
    m_listbook7478->AssignImageList(m_listbook7478_il);
    
    flexGridSizer5821->Add(m_listbook7478, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel7480 = new wxPanel(m_listbook7478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel7480ImgIndex;
    m_panel7480ImgIndex = m_listbook7478_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("color-swatch")));
    m_listbook7478->AddPage(m_panel7480, _("Gamepad\nState"), false, m_panel7480ImgIndex);
    
    wxFlexGridSizer* flexGridSizer6042 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6042->SetFlexibleDirection( wxBOTH );
    flexGridSizer6042->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6042->AddGrowableCol(0);
    flexGridSizer6042->AddGrowableRow(0);
    m_panel7480->SetSizer(flexGridSizer6042);
    
    m_splitter190 = new wxSplitterWindow(m_panel7480, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel7480, wxSize(-1,-1)), wxSP_3D);
    m_splitter190->SetSashGravity(0.6);
    m_splitter190->SetMinimumPaneSize(10);
    
    flexGridSizer6042->Add(m_splitter190, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_spTrace = new wxPanel(m_splitter190, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter190, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer200 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer200->SetFlexibleDirection( wxBOTH );
    flexGridSizer200->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer200->AddGrowableCol(0);
    flexGridSizer200->AddGrowableRow(0);
    m_spTrace->SetSizer(flexGridSizer200);
    
    m_gamepadTrace = new wxTextCtrl(m_spTrace, wxID_ANY, wxT("Gamepad state not available"), wxDefaultPosition, wxDLG_UNIT(m_spTrace, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadTrace->SetFont(m_gamepadTraceFont);
    
    flexGridSizer200->Add(m_gamepadTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer206 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer206->SetFlexibleDirection( wxBOTH );
    flexGridSizer206->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer200->Add(flexGridSizer206, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btConnect = new wxBitmapToggleButton(m_spTrace, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_spTrace, wxSize(26,26)), 0);
    m_btConnect->SetToolTip(_("Connect Gamepad with CNC controller"));
    m_btConnect->SetValue(true);
    
    flexGridSizer206->Add(m_btConnect, 0, wxALL, WXC_FROM_DIP(1));
    m_btConnect->SetMinSize(wxSize(26,26));
    
    m_spHistory = new wxPanel(m_splitter190, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter190, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter190->SplitHorizontally(m_spTrace, m_spHistory, 0);
    
    wxFlexGridSizer* flexGridSizer202 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer202->SetFlexibleDirection( wxBOTH );
    flexGridSizer202->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer202->AddGrowableCol(0);
    flexGridSizer202->AddGrowableRow(1);
    m_spHistory->SetSizer(flexGridSizer202);
    
    m_staticText204 = new wxStaticText(m_spHistory, wxID_ANY, _("Gamepad Commad history:"), wxDefaultPosition, wxDLG_UNIT(m_spHistory, wxSize(-1,-1)), 0);
    wxFont m_staticText204Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText204->SetFont(m_staticText204Font);
    
    flexGridSizer202->Add(m_staticText204, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer207 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer207->SetFlexibleDirection( wxBOTH );
    flexGridSizer207->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer207->AddGrowableCol(0);
    flexGridSizer207->AddGrowableRow(0);
    
    flexGridSizer202->Add(flexGridSizer207, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_gamepadCmdHistoryPlaceholder = new wxPanel(m_spHistory, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_spHistory, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_gamepadCmdHistoryPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer207->Add(m_gamepadCmdHistoryPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer209 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer209->SetFlexibleDirection( wxBOTH );
    flexGridSizer209->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer207->Add(flexGridSizer209, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btClearHistory = new wxButton(m_spHistory, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_spHistory, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearHistory->SetBitmapMargins(2,2);
    #endif
    m_btClearHistory->SetToolTip(_("ClearHistory"));
    
    flexGridSizer209->Add(m_btClearHistory, 0, wxALL, WXC_FROM_DIP(1));
    m_btClearHistory->SetMinSize(wxSize(26,26));
    
    m_panel7482 = new wxPanel(m_listbook7478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel7482ImgIndex;
    m_panel7482ImgIndex = m_listbook7478_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("system-run-3")));
    m_listbook7478->AddPage(m_panel7482, _("Service\nTrace"), false, m_panel7482ImgIndex);
    
    wxFlexGridSizer* flexGridSizer60421 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer60421->SetFlexibleDirection( wxBOTH );
    flexGridSizer60421->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer60421->AddGrowableCol(0);
    flexGridSizer60421->AddGrowableRow(0);
    m_panel7482->SetSizer(flexGridSizer60421);
    
    m_gamepadServiceTrace = new wxTextCtrl(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadServiceTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadServiceTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadServiceTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadServiceTrace->SetFont(m_gamepadServiceTraceFont);
    
    flexGridSizer60421->Add(m_gamepadServiceTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer6026 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer6026->SetFlexibleDirection( wxBOTH );
    flexGridSizer6026->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer60421->Add(flexGridSizer6026, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btQueryGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btQueryGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-question-2 (2)")), wxLEFT);
    m_btQueryGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btQueryGamepadService->SetToolTip(_("Query the underlying Service"));
    
    flexGridSizer6026->Add(m_btQueryGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btQueryGamepadService->SetMinSize(wxSize(26,26));
    
    m_staticLine60512 = new wxStaticLine(m_panel7482, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6026->Add(m_staticLine60512, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_btStartGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStartGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-run-3")), wxLEFT);
    m_btStartGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStartGamepadService->SetToolTip(_("Start the underlying Service"));
    
    flexGridSizer6026->Add(m_btStartGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btStartGamepadService->SetMinSize(wxSize(26,26));
    
    m_btStopGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStopGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-x-close")), wxLEFT);
    m_btStopGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStopGamepadService->SetToolTip(_("Stop the underlying Service"));
    
    flexGridSizer6026->Add(m_btStopGamepadService, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_btStopGamepadService->SetMinSize(wxSize(26,26));
    
    m_staticLine6051 = new wxStaticLine(m_panel7482, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6026->Add(m_staticLine6051, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_btClearGamepadServiceTrace = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearGamepadServiceTrace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("clean")), wxLEFT);
    m_btClearGamepadServiceTrace->SetBitmapMargins(2,2);
    #endif
    m_btClearGamepadServiceTrace->SetToolTip(_("Clear the trace"));
    
    flexGridSizer6026->Add(m_btClearGamepadServiceTrace, 0, wxALL, WXC_FROM_DIP(1));
    m_btClearGamepadServiceTrace->SetMinSize(wxSize(26,26));
    
    SetName(wxT("CncGamepadControllerStateBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btConnect->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::onConnectGamepad), NULL, this);
    m_btClearHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::onClearHistory), NULL, this);
    m_btQueryGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

CncGamepadControllerStateBase::~CncGamepadControllerStateBase()
{
    m_btConnect->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::onConnectGamepad), NULL, this);
    m_btClearHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::onClearHistory), NULL, this);
    m_btQueryGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

CncGamepadControllerSpyBase::CncGamepadControllerSpyBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("gamepad-active"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer61 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer61->SetFlexibleDirection( wxBOTH );
    flexGridSizer61->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer61);
    
    wxFlexGridSizer* flexGridSizer63 = new wxFlexGridSizer(1, 20, 0, 0);
    flexGridSizer63->SetFlexibleDirection( wxBOTH );
    flexGridSizer63->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer61->Add(flexGridSizer63, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText65 = new wxStaticText(this, wxID_ANY, _("  State:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText65Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText65->SetFont(m_staticText65Font);
    
    flexGridSizer63->Add(m_staticText65, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer63->Add(32, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticBitmap1681 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("lStrick16")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(17,17)), 0 );
    
    flexGridSizer63->Add(m_staticBitmap1681, 0, wxALL, WXC_FROM_DIP(0));
    m_staticBitmap1681->SetMinSize(wxSize(16,16));
    
    m_staticBitmap168 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("rstick16")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(17,17)), 0 );
    
    flexGridSizer63->Add(m_staticBitmap168, 0, wxALL, WXC_FROM_DIP(0));
    m_staticBitmap168->SetMinSize(wxSize(16,16));
    
    m_staticText651 = new wxStaticText(this, wxID_ANY, _("Position Mode:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText651Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText651->SetFont(m_staticText651Font);
    
    flexGridSizer63->Add(m_staticText651, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer63->Add(24, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticBitmap122 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-cross-dark-icon16")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer63->Add(m_staticBitmap122, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText58 = new wxStaticText(this, wxID_ANY, _("Step Mode/Sensiitivity:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer63->Add(m_staticText58, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer63->Add(32, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText131 = new wxStaticText(this, wxID_ANY, _("X/Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText131Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText131->SetFont(m_staticText131Font);
    
    flexGridSizer63->Add(m_staticText131, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer63->Add(38, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText133 = new wxStaticText(this, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText133Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText133->SetFont(m_staticText133Font);
    
    flexGridSizer63->Add(m_staticText133, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticLine73 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer61->Add(m_staticLine73, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer27 = new wxFlexGridSizer(1, 20, 0, 0);
    flexGridSizer27->SetFlexibleDirection( wxBOTH );
    flexGridSizer27->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer61->Add(flexGridSizer27, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine163 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer27->Add(m_staticLine163, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_gamepadState = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("gamepad-active")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer27->Add(m_gamepadState, 0, wxALL, WXC_FROM_DIP(8));
    
    m_staticLine60 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer27->Add(m_staticLine60, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_gpBmp1 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("dpad_all-small")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer27->Add(m_gpBmp1, 0, wxALL, WXC_FROM_DIP(5));
    
    m_gpBmp2 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("dpad_updown-small")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer27->Add(m_gpBmp2, 0, wxALL, WXC_FROM_DIP(5));
    
    m_gpBmp3 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("lstick_all-small")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer27->Add(m_gpBmp3, 0, wxALL, WXC_FROM_DIP(5));
    
    m_gpBmp4 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("rstick_updown-small")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer27->Add(m_gpBmp4, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine71 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer27->Add(m_staticLine71, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer219 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer219->SetFlexibleDirection( wxBOTH );
    flexGridSizer219->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer27->Add(flexGridSizer219, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer219->Add(0, 3, 1, wxALL, WXC_FROM_DIP(0));
    
    m_gpBmpStepMode = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("start-here")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer219->Add(m_gpBmpStepMode, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_chStepsSensitivityArr;
    m_chStepsSensitivityArr.Add(wxT("Finest"));
    m_chStepsSensitivityArr.Add(wxT("Fine"));
    m_chStepsSensitivityArr.Add(wxT("Medium"));
    m_chStepsSensitivityArr.Add(wxT("Rought"));
    m_chStepsSensitivityArr.Add(wxT("Roughest"));
    m_chStepsSensitivity = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(100,26)), m_chStepsSensitivityArr, 0);
    m_chStepsSensitivity->SetSelection(1);
    
    flexGridSizer27->Add(m_chStepsSensitivity, 0, wxALL, WXC_FROM_DIP(5));
    m_chStepsSensitivity->SetMinSize(wxSize(100,26));
    
    m_staticLine716 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer27->Add(m_staticLine716, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer27->Add(12, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bmpCompassXY = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("compass_000")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(37,37)), 0 );
    
    flexGridSizer27->Add(m_bmpCompassXY, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(1));
    m_bmpCompassXY->SetMinSize(wxSize(37,37));
    
    flexGridSizer27->Add(16, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bmpCompassZ = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("compass_090")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(37,37)), 0 );
    
    flexGridSizer27->Add(m_bmpCompassZ, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(1));
    m_bmpCompassZ->SetMinSize(wxSize(37,37));
    
    flexGridSizer27->Add(12, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine161 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer27->Add(m_staticLine161, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine733 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer61->Add(m_staticLine733, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer95 = new wxFlexGridSizer(1, 9, 0, 0);
    flexGridSizer95->SetFlexibleDirection( wxBOTH );
    flexGridSizer95->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer61->Add(flexGridSizer95, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticBitmap56 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-square-dark-icon16")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    m_staticBitmap56->SetToolTip(_("Corresponding Gamepad Button"));
    
    flexGridSizer95->Add(m_staticBitmap56, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer95->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText97 = new wxStaticText(this, wxID_ANY, _("Open Reference Position Dialog"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer95->Add(m_staticText97, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer95->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine171 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer95->Add(m_staticLine171, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer95->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticBitmap562 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("options16")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(17,17)), 0 );
    m_staticBitmap562->SetToolTip(_("Gamepad 'Share' Button"));
    
    flexGridSizer95->Add(m_staticBitmap562, 0, wxALL, WXC_FROM_DIP(1));
    m_staticBitmap562->SetMinSize(wxSize(16,16));
    
    flexGridSizer95->Add(5, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText174 = new wxStaticText(this, wxID_ANY, _("Open/Select Navigator"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer95->Add(m_staticText174, 0, wxALL, WXC_FROM_DIP(1));
    
    m_continuesTimer = new wxTimer;
    m_continuesTimer->Start(1000, false);
    
    SetName(wxT("CncGamepadControllerSpyBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_gpBmp1->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickNaviXY), NULL, this);
    m_gpBmp2->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickNaviZ), NULL, this);
    m_gpBmp3->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickLeftStick), NULL, this);
    m_gpBmp4->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickRightStick), NULL, this);
    m_chStepsSensitivity->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(CncGamepadControllerSpyBase::selectSensitivity), NULL, this);
    m_continuesTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncGamepadControllerSpyBase::onContinuesTimer), NULL, this);
    
}

CncGamepadControllerSpyBase::~CncGamepadControllerSpyBase()
{
    m_gpBmp1->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickNaviXY), NULL, this);
    m_gpBmp2->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickNaviZ), NULL, this);
    m_gpBmp3->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickLeftStick), NULL, this);
    m_gpBmp4->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncGamepadControllerSpyBase::dclickRightStick), NULL, this);
    m_chStepsSensitivity->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(CncGamepadControllerSpyBase::selectSensitivity), NULL, this);
    m_continuesTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncGamepadControllerSpyBase::onContinuesTimer), NULL, this);
    
    m_continuesTimer->Stop();
    wxDELETE( m_continuesTimer );

}

ImageLibGamepadSpy::ImageLibGamepadSpy()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_000"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_000"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_045"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_045"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_090"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_090"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_135"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_135"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_180"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_180"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_225"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_225"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_270"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_270"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_315"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_315"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COMPASS_NULL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COMPASS_NULL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NAVI_XY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NAVI_XY"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NAVI_Z"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NAVI_Z"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STICK_LEFT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STICK_LEFT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STICK_RIGHT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STICK_RIGHT"), bmp));
        }
    }
    
}

ImageLibGamepadSpy::~ImageLibGamepadSpy()
{
}

ImageLibGamepadCommand::ImageLibGamepadCommand()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_START"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_START"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_UPDATE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_UPDATE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_UPDATE_WITH_CONTENT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_UPDATE_WITH_CONTENT"), bmp));
        }
    }
    
}

ImageLibGamepadCommand::~ImageLibGamepadCommand()
{
}

ImageLibGamepadStepMode::ImageLibGamepadStepMode()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_INTERACTIVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_INTERACTIVE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_INTERACTIVE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_INTERACTIVE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STEPWISE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STEPWISE"), bmp));
        }
    }
    
}

ImageLibGamepadStepMode::~ImageLibGamepadStepMode()
{
}
