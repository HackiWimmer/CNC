#include "CncClipperLib.h"

//////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& os, const ClipperLib::IntPoint& p) {
//////////////////////////////////////////////////////////////
	os << wxString::Format("%10ld,%10ld,%10ld", p.X, p.Y, p.Z);
	return os;
}
//////////////////////////////////////////////////////////////////
double ClipperLib::convert(double v) {
//////////////////////////////////////////////////////////////////
	return v * ClipperLib::floatFactor;
}
//////////////////////////////////////////////////////////////////
double ClipperLib::transform(const cInt& v) {
//////////////////////////////////////////////////////////////////
	return ((double)v) /  ClipperLib::floatFactor;
}
//////////////////////////////////////////////////////////////////
ClipperLib::cInt ClipperLib::transform(double v) {
//////////////////////////////////////////////////////////////////
	return v * ClipperLib::floatFactor;
}
//////////////////////////////////////////////////////////////////
ClipperLib::IntPoint ClipperLib::transform(CncLongPosition p) { 
//////////////////////////////////////////////////////////////////
	return ClipperLib::IntPoint(p.getX(), 
								p.getY(), 
								p.getZ()
							   ); 
}
//////////////////////////////////////////////////////////////////
ClipperLib::IntPoint ClipperLib::transform(double pX, double pY, double pZ) { 
//////////////////////////////////////////////////////////////////
	return ClipperLib::IntPoint(pX * ClipperLib::floatFactor, 
								pY * ClipperLib::floatFactor, 
								pZ * ClipperLib::floatFactor
							   ); 
}
//////////////////////////////////////////////////////////////////
ClipperLib::IntPoint ClipperLib::transform(CncDoublePosition p) { 
//////////////////////////////////////////////////////////////////
	return ClipperLib::IntPoint(p.getX() * ClipperLib::floatFactor, 
								p.getY() * ClipperLib::floatFactor, 
								p.getZ() * ClipperLib::floatFactor
							   ); 
}
//////////////////////////////////////////////////////////////////
CncLongPosition ClipperLib::asCncLongPosition(IntPoint p) {
//////////////////////////////////////////////////////////////////
	return CncLongPosition(	p.X, 
							p.Y, 
							p.Z
						  );
}
//////////////////////////////////////////////////////////////////
CncDoublePosition ClipperLib::asCncDoublePosition(IntPoint p) {
//////////////////////////////////////////////////////////////////
	return CncDoublePosition(	((double)p.X) /  ClipperLib::floatFactor, 
								((double)p.Y) /  ClipperLib::floatFactor, 
								((double)p.Z) /  ClipperLib::floatFactor
							);
}
//////////////////////////////////////////////////////////////////
bool ClipperLib::isPathClosed(const ClipperLib::Path& p) {
//////////////////////////////////////////////////////////////////
	if ( p.size() == 0 )
		return true;
		
	return ( *p.begin() == *(p.end() - 1) );
}
//////////////////////////////////////////////////////////////////
bool ClipperLib::closePath(ClipperLib::Path& p) {
//////////////////////////////////////////////////////////////////
	if ( ClipperLib::isPathClosed(p) == true )
		return true;
	
	if ( p.size() > 1 )
		p.push_back(*p.begin());
	
	return p.size() > 2;
}
