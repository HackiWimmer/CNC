//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBClass::MainFrameBClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("shield_blue"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    m_auimgrMain = new wxAuiManager;
    m_auimgrMain->SetManagedWindow( this );
    m_auimgrMain->SetFlags( wxAUI_MGR_LIVE_RESIZE|wxAUI_MGR_TRANSPARENT_HINT|wxAUI_MGR_TRANSPARENT_DRAG|wxAUI_MGR_ALLOW_ACTIVE_PANE|wxAUI_MGR_ALLOW_FLOATING);
    m_auimgrMain->GetArtProvider()->SetMetric( wxAUI_DOCKART_SASH_SIZE, 3);
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_auimgrMain->GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, wxAUI_GRADIENT_NONE);
    
    m_auibarMain = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_NO_AUTORESIZE);
    m_auibarMain->SetToolBitmapSize(wxSize(16,16));
    
    m_auimgrMain->AddPane(m_auibarMain, wxAuiPaneInfo().Caption(_("Main")).Direction(wxAUI_DOCK_TOP).Layer(0).Row(0).Position(0).BestSize(40,40).MinSize(40,40).MaxSize(40,40).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    m_staticText1842 = new wxStaticText(m_auibarMain, wxID_ANY, _("Port:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_auibarMain->AddControl(m_staticText1842);
    
    wxArrayString m_portSelectorArr;
    m_portSelector = new wxComboBox(m_auibarMain, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(100,-1)), m_portSelectorArr, wxCB_READONLY|wxCB_DROPDOWN);
    m_portSelector->SetToolTip(_("Select the Serial Port"));
    m_auibarMain->AddControl(m_portSelector);
    
    m_connect = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_connect->SetToolTip(_("Connect to mirco controller"));
    m_auibarMain->AddControl(m_connect);
    
    m_auibarMain->AddSeparator();
    
    m_staticText752 = new wxStaticText(m_auibarMain, wxID_ANY, _("Unit:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_auibarMain->AddControl(m_staticText752);
    
    wxArrayString m_unitArr;
    m_unitArr.Add(wxT("mm"));
    m_unitArr.Add(wxT("steps"));
    m_unit = new wxComboBox(m_auibarMain, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), m_unitArr, wxCB_SORT|wxCB_READONLY);
    wxFont m_unitFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unit->SetFont(m_unitFont);
    m_unit->SetToolTip(_("Select the Display Unit"));
    m_unit->SetSelection(0);
    m_auibarMain->AddControl(m_unit);
    
    m_auibarMain->AddSeparator();
    
    m_auibarMain->AddStretchSpacer(1);
    
    m_auibarMain->AddSeparator();
    
    m_staticText1748 = new wxStaticText(m_auibarMain, wxID_ANY, _("Step Delay:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_staticText1748->Hide();
    m_auibarMain->AddControl(m_staticText1748);
    
    m_stepDelay = new wxSlider(m_auibarMain, wxID_ANY, 0, 0, 200, wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(200,-1)), wxSL_SELRANGE|wxSL_HORIZONTAL);
    wxFont m_stepDelayFont(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelay->SetFont(m_stepDelayFont);
    m_stepDelay->SetToolTip(_("Artificially Step Delay"));
    m_auibarMain->AddControl(m_stepDelay);
    
    m_stepDelayValue = new wxStaticText(m_auibarMain, wxID_ANY, _("0 ms"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(30,-1)), wxALIGN_RIGHT);
    wxFont m_stepDelayValueFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelayValue->SetFont(m_stepDelayValueFont);
    m_auibarMain->AddControl(m_stepDelayValue);
    
    m_auibarMain->AddSeparator();
    
    m_rcReset = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-debugger_restart")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcReset->SetToolTip(_("Reset Controller"));
    m_auibarMain->AddControl(m_rcReset);
    
    m_auibarMain->AddSeparator();
    
    m_auibarMain->AddTool(wxID_ANY, _("Tool Label"), wxXmlResource::Get()->LoadBitmap(wxT("16-cog")), wxNullBitmap, wxITEM_NORMAL, _("Run Config"), wxT(""), NULL);
    wxAuiToolBarItem* m_RcConfig = m_auibarMain->FindToolByIndex(m_auibarMain->GetToolCount()-1);
    if (m_RcConfig) {
        m_RcConfig->SetHasDropDown(true);
        m_rcConfigMenu = new wxMenu;
        m_miRcRun = new wxMenuItem(m_rcConfigMenu, wxID_ANY, _("Run"), wxT(""), wxITEM_RADIO);
        m_rcConfigMenu->Append(m_miRcRun);
        m_miRcDebug = new wxMenuItem(m_rcConfigMenu, wxID_ANY, _("Debug"), wxT(""), wxITEM_RADIO);
        m_rcConfigMenu->Append(m_miRcDebug);
        m_rcConfigMenu->AppendSeparator();
        m_miRcPreprocessing = new wxMenuItem(m_rcConfigMenu, wxID_ANY, _("Preprocessing"), wxT(""), wxITEM_CHECK);
        m_rcConfigMenu->Append(m_miRcPreprocessing);
        m_miRcPreprocessing->Check();
        m_miRcUserAgent = new wxMenuItem(m_rcConfigMenu, wxID_ANY, _("UserAgent"), wxT(""), wxITEM_CHECK);
        m_rcConfigMenu->Append(m_miRcUserAgent);
        m_miRcUserAgent->Check();
        m_miRcSpooling = new wxMenuItem(m_rcConfigMenu, wxID_ANY, _("Spooling"), wxT(""), wxITEM_CHECK);
        m_rcConfigMenu->Append(m_miRcSpooling);
        m_miRcSpooling->Check();
        
        m_dropdownMenus.insert(std::make_pair( m_RcConfig->GetId(), m_rcConfigMenu) );
    }
    
    m_rcRun = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-debugger_start")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcRun->SetToolTip(_("Run or Debug"));
    m_auibarMain->AddControl(m_rcRun);
    
    m_rcPause = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-interrupt")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcPause->SetToolTip(_("Pause"));
    m_auibarMain->AddControl(m_rcPause);
    
    m_rcNextPath = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-down")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextPath->SetToolTip(_("Next Path"));
    m_auibarMain->AddControl(m_rcNextPath);
    
    m_rcNextStep = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-step_in")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextStep->SetToolTip(_("Next Step"));
    m_auibarMain->AddControl(m_rcNextStep);
    
    m_rcFinish = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-forward")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcFinish->SetToolTip(_("Finish Session"));
    m_auibarMain->AddControl(m_rcFinish);
    
    m_rcStop = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-execute_stop")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcStop->SetToolTip(_("Stop Session"));
    m_auibarMain->AddControl(m_rcStop);
    
    m_auibarMain->AddSeparator();
    
    m_controlerPause = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-interrupt")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_controlerPause->SetToolTip(_("Controller Pause"));
    m_controlerPause->Hide();
    m_auibarMain->AddControl(m_controlerPause);
    
    m_btnEmergenyStop = new wxButton(m_auibarMain, wxID_ANY, _("Emergency Stop [ESC]"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btnEmergenyStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_red_E")), wxLEFT);
    m_btnEmergenyStop->SetBitmapMargins(0,0);
    #endif
    m_btnEmergenyStop->SetBackgroundColour(wxColour(wxT("rgb(128,64,64)")));
    m_btnEmergenyStop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_btnEmergenyStop->SetToolTip(_("Interrupt the CNC Controller"));
    m_auibarMain->AddControl(m_btnEmergenyStop);
    m_auibarMain->Realize();
    
    m_scrollWinMain = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL | wxVSCROLL);
    m_scrollWinMain->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_scrollWinMain->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_scrollWinMain, wxAuiPaneInfo().Caption(_("CNC Main View")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(0).Position(0).BestSize(800,800).MinSize(10,10).MaxSize(800,800).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    flexGridSizer434 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer434->SetFlexibleDirection( wxBOTH );
    flexGridSizer434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer434->AddGrowableCol(0);
    flexGridSizer434->AddGrowableRow(0);
    m_scrollWinMain->SetSizer(flexGridSizer434);
    
    m_mainNotebook = new wxNotebook(m_scrollWinMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinMain, wxSize(-1,-1)), wxNB_NOPAGETHEME|wxBK_DEFAULT);
    m_mainNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_mainNotebook->SetName(wxT("m_mainNotebook"));
    wxImageList* m_mainNotebook_il = new wxImageList(16, 16);
    m_mainNotebook->AssignImageList(m_mainNotebook_il);
    
    flexGridSizer434->Add(m_mainNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelReference = new wxPanel(m_mainNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelReferenceImgIndex;
    m_panelReferenceImgIndex = m_mainNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-macro")));
    m_mainNotebook->AddPage(m_panelReference, _("References"), false, m_panelReferenceImgIndex);
    
    flexGridSizer1885 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1885->SetFlexibleDirection( wxBOTH );
    flexGridSizer1885->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1885->AddGrowableCol(0);
    flexGridSizer1885->AddGrowableRow(0);
    m_panelReference->SetSizer(flexGridSizer1885);
    
    flexGridSizer1393 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1393->SetFlexibleDirection( wxBOTH );
    flexGridSizer1393->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1393->AddGrowableCol(0);
    flexGridSizer1393->AddGrowableCol(1);
    flexGridSizer1393->AddGrowableRow(0);
    
    flexGridSizer1885->Add(flexGridSizer1393, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer777 = new wxFlexGridSizer(9, 1, 0, 0);
    flexGridSizer777->SetFlexibleDirection( wxBOTH );
    flexGridSizer777->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer777->AddGrowableCol(0);
    flexGridSizer777->AddGrowableRow(2);
    
    flexGridSizer1393->Add(flexGridSizer777, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText779 = new wxStaticText(m_panelReference, wxID_ANY, _("Manually motion control"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    wxFont m_staticText779Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText779->SetFont(m_staticText779Font);
    
    flexGridSizer777->Add(m_staticText779, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine783 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer777->Add(m_staticLine783, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer547 = new wxFlexGridSizer(18, 3, 1, 0);
    flexGridSizer547->SetFlexibleDirection( wxBOTH );
    flexGridSizer547->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer547->AddGrowableCol(1);
    flexGridSizer547->AddGrowableRow(1);
    flexGridSizer547->AddGrowableRow(4);
    
    flexGridSizer777->Add(flexGridSizer547, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText821 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText821, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButtonX = new wxSpinButton(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxSP_HORIZONTAL);
    m_spinButtonX->SetRange(0, 100);
    m_spinButtonX->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText63169 = new wxStaticText(m_panelReference, wxID_ANY, _("+x"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText63169, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButtonY = new wxSpinButton(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButtonY->SetRange(0, 100);
    m_spinButtonY->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_moveXYAxisCtl = new wxTextCtrl(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxTE_MULTILINE|wxHSCROLL);
    m_moveXYAxisCtl->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_moveXYAxisCtlFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_moveXYAxisCtl->SetFont(m_moveXYAxisCtlFont);
    
    flexGridSizer547->Add(m_moveXYAxisCtl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText823 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText823, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText6316 = new wxStaticText(m_panelReference, wxID_ANY, _("+y"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText6316, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText825 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText825, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText827 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText827, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText631 = new wxStaticText(m_panelReference, wxID_ANY, _("+z"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText631, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText832 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText832, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText834 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText834, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButtonZ = new wxSpinButton(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButtonZ->SetRange(0, 100);
    m_spinButtonZ->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_moveZAxisCtl = new wxTextCtrl(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxTE_MULTILINE|wxHSCROLL);
    m_moveZAxisCtl->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_moveZAxisCtlFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_moveZAxisCtl->SetFont(m_moveZAxisCtlFont);
    
    flexGridSizer547->Add(m_moveZAxisCtl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText830 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,1)), 0);
    
    flexGridSizer547->Add(m_staticText830, 0, wxALL, WXC_FROM_DIP(0));
    m_staticText830->SetMinSize(wxSize(-1,1));
    
    m_staticText836 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,1)), 0);
    
    flexGridSizer547->Add(m_staticText836, 0, wxALL, WXC_FROM_DIP(0));
    m_staticText836->SetMinSize(wxSize(-1,1));
    
    flexGridSizer1390 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer1390->SetFlexibleDirection( wxBOTH );
    flexGridSizer1390->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer777->Add(flexGridSizer1390, 0, wxALL|wxALIGN_RIGHT|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_includingWpt = new wxCheckBox(m_panelReference, wxID_ANY, _("Incl. Workpiece thickness?"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    m_includingWpt->SetValue(false);
    
    flexGridSizer1390->Add(m_includingWpt, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(9));
    
    m_setZero = new wxButton(m_panelReference, wxID_ANY, _("Set curent Position to Zero"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    m_setZero->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_setZero->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer1390->Add(m_setZero, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    flexGridSizer1390->Add(10, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer1163 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1163->SetFlexibleDirection( wxBOTH );
    flexGridSizer1163->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1163->AddGrowableCol(0);
    
    flexGridSizer1393->Add(flexGridSizer1163, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer1152 = new wxFlexGridSizer(9, 1, 0, 0);
    flexGridSizer1152->SetFlexibleDirection( wxBOTH );
    flexGridSizer1152->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1152->AddGrowableCol(0);
    
    flexGridSizer1163->Add(flexGridSizer1152, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText1156 = new wxStaticText(m_panelReference, wxID_ANY, _(" Predefined Positions:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    wxFont m_staticText1156Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText1156->SetFont(m_staticText1156Font);
    
    flexGridSizer1152->Add(m_staticText1156, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine1158 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1152->Add(m_staticLine1158, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer1165 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1165->SetFlexibleDirection( wxBOTH );
    flexGridSizer1165->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1165->AddGrowableCol(0);
    
    flexGridSizer1152->Add(flexGridSizer1165, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1171 = new wxStaticText(m_panelReference, wxID_ANY, _("Home:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    m_staticText1171->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1171Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1171Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1171->SetFont(m_staticText1171Font);
    
    flexGridSizer1165->Add(m_staticText1171, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1173 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1173, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_homeDefintionArr;
    m_homeDefintionArr.Add(wxT("a) X(min), Y(min), Z(Top)"));
    m_homeDefintionArr.Add(wxT("b) X(max), Y(max), Z(Top)"));
    m_homeDefintionArr.Add(wxT("c) X(mid), Y(mid), Z(Top)"));
    m_homeDefintionArr.Add(wxT("d) X(mid), Y(mid), Z(mid)"));
    m_homeDefintion = new wxComboBox(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), m_homeDefintionArr, wxCB_READONLY);
    m_homeDefintion->SetSelection(0);
    
    flexGridSizer1165->Add(m_homeDefintion, 0, wxALL, WXC_FROM_DIP(5));
    
    m_moveHome = new wxButton(m_panelReference, wxID_ANY, _("Move to Home"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(110,-1)), 0);
    m_moveHome->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveHome, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_moveHome->SetMinSize(wxSize(110,-1));
    
    m_staticLine2177 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2177, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2179 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2179, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    flexGridSizer2180 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2180->SetFlexibleDirection( wxBOTH );
    flexGridSizer2180->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2180->AddGrowableCol(0);
    flexGridSizer2180->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer2180, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText2182 = new wxStaticText(m_panelReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(114,-1)), 0);
    
    flexGridSizer2180->Add(m_staticText2182, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText2182->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYArr;
    m_zeroMoveModeXYArr.Add(wxT("1D"));
    m_zeroMoveModeXYArr.Add(wxT("2D"));
    m_zeroMoveModeXY = new wxComboBox(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), m_zeroMoveModeXYArr, wxCB_READONLY);
    m_zeroMoveModeXY->SetToolTip(_("1D: Each axis moves separatly\n2D: X and Y moves simultaneously"));
    m_zeroMoveModeXY->SetSelection(0);
    
    flexGridSizer2180->Add(m_zeroMoveModeXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_moveXYtoZero = new wxButton(m_panelReference, wxID_ANY, _("Move XY to Zero"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(110,-1)), 0);
    m_moveXYtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_moveXYtoZero->SetMinSize(wxSize(110,-1));
    
    flexGridSizer218027 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer218027->SetFlexibleDirection( wxBOTH );
    flexGridSizer218027->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer218027->AddGrowableCol(0);
    flexGridSizer218027->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer218027, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText218228 = new wxStaticText(m_panelReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(114,-1)), 0);
    
    flexGridSizer218027->Add(m_staticText218228, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText218228->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYZArr;
    m_zeroMoveModeXYZArr.Add(wxT("1D"));
    m_zeroMoveModeXYZArr.Add(wxT("2D"));
    m_zeroMoveModeXYZArr.Add(wxT("3D"));
    m_zeroMoveModeXYZ = new wxComboBox(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), m_zeroMoveModeXYZArr, wxCB_READONLY);
    m_zeroMoveModeXYZ->SetToolTip(_("1D: Each axis moves separatly\n2D: Z moves separatly as well as X and Y moves simultaneously\n3D: X, Y and Z moves simultaneously"));
    m_zeroMoveModeXYZ->SetSelection(0);
    
    flexGridSizer218027->Add(m_zeroMoveModeXYZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_moveXYZtoZero = new wxButton(m_panelReference, wxID_ANY, _("Move XYZ to Zero"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(110,-1)), 0);
    m_moveXYZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_moveXYZtoZero->SetMinSize(wxSize(110,-1));
    
    flexGridSizer21802730 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer21802730->SetFlexibleDirection( wxBOTH );
    flexGridSizer21802730->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21802730->AddGrowableCol(0);
    flexGridSizer21802730->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer21802730, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText21822831 = new wxStaticText(m_panelReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(114,-1)), 0);
    
    flexGridSizer21802730->Add(m_staticText21822831, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText21822831->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeZArr;
    m_zeroMoveModeZArr.Add(wxT("1D"));
    m_zeroMoveModeZ = new wxComboBox(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), m_zeroMoveModeZArr, wxCB_READONLY);
    m_zeroMoveModeZ->SetToolTip(_("1D: Each axis moves separatly"));
    m_zeroMoveModeZ->SetSelection(0);
    
    flexGridSizer21802730->Add(m_zeroMoveModeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_moveZtoZero = new wxButton(m_panelReference, wxID_ANY, _("Move Z to Zero"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(110,-1)), 0);
    m_moveZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_moveZtoZero->SetMinSize(wxSize(110,-1));
    
    m_staticLine2191 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2191, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2193 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2193, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1177233 = new wxStaticText(m_panelReference, wxID_ANY, _("XY Axis:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    m_staticText1177233->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1177233Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1177233Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1177233->SetFont(m_staticText1177233Font);
    
    flexGridSizer1165->Add(m_staticText1177233, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText11772 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText11772, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2439 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2439->SetFlexibleDirection( wxBOTH );
    flexGridSizer2439->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2439, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_xToMax = new wxButton(m_panelReference, wxID_ANY, _("Move X Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_xToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_xToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMax->SetToolTip(_("Moves the X axis to the physical MAX position"));
    
    flexGridSizer2439->Add(m_xToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_xToMax->SetMinSize(wxSize(140,-1));
    
    m_xToMid = new wxButton(m_panelReference, wxID_ANY, _("Move X Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_xToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_xToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMid->SetToolTip(_("Moves the X axis to the physical MID position"));
    
    flexGridSizer2439->Add(m_xToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMid->SetMinSize(wxSize(140,-1));
    
    m_xToMin = new wxButton(m_panelReference, wxID_ANY, _("Move X Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_xToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_xToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMin->SetToolTip(_("Moves the X axis to the physical MIN position"));
    
    flexGridSizer2439->Add(m_xToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMin->SetMinSize(wxSize(140,-1));
    
    flexGridSizer2440 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2440->SetFlexibleDirection( wxBOTH );
    flexGridSizer2440->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2440, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_yToMax = new wxButton(m_panelReference, wxID_ANY, _("Move Y Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_yToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_yToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMax->SetToolTip(_("Moves the Y axis to the physical MAX position"));
    
    flexGridSizer2440->Add(m_yToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMax->SetMinSize(wxSize(140,-1));
    
    m_yToMid = new wxButton(m_panelReference, wxID_ANY, _("Move Y Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_yToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_yToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMid->SetToolTip(_("Moves the Y axis to the physical MID position"));
    
    flexGridSizer2440->Add(m_yToMid, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMid->SetMinSize(wxSize(140,-1));
    
    m_yToMin = new wxButton(m_panelReference, wxID_ANY, _("Move Y Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_yToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_yToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMin->SetToolTip(_("Moves the Y axis to the physical MIN position"));
    
    flexGridSizer2440->Add(m_yToMin, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMin->SetMinSize(wxSize(140,-1));
    
    m_staticLine2195 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2195, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2197 = new wxStaticLine(m_panelReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2197, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1175 = new wxStaticText(m_panelReference, wxID_ANY, _("Z Axis:"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    m_staticText1175->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1175Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1175Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1175->SetFont(m_staticText1175Font);
    
    flexGridSizer1165->Add(m_staticText1175, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1177 = new wxStaticText(m_panelReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1177, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer2434 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2434->SetFlexibleDirection( wxBOTH );
    flexGridSizer2434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2434, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_zToMax = new wxButton(m_panelReference, wxID_ANY, _("Move Z Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_zToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMax->SetToolTip(_("Moves the Z axis to the physical MAX position"));
    
    flexGridSizer2434->Add(m_zToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToMax->SetMinSize(wxSize(140,-1));
    
    m_zToMid = new wxButton(m_panelReference, wxID_ANY, _("Move Z Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_zToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_zToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMid->SetToolTip(_("Moves the Z axis to the physical MID position"));
    
    flexGridSizer2434->Add(m_zToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMid->SetMinSize(wxSize(140,-1));
    
    m_zToMin = new wxButton(m_panelReference, wxID_ANY, _("Move Z Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_zToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMin->SetToolTip(_("Moves the Z axis to the physical MIN position"));
    
    flexGridSizer2434->Add(m_zToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMin->SetMinSize(wxSize(140,-1));
    
    flexGridSizer2435 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2435->SetFlexibleDirection( wxBOTH );
    flexGridSizer2435->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2435, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_zToTop = new wxButton(m_panelReference, wxID_ANY, _("Move Z Axis to Top"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_zToTop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToTop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToTop->SetToolTip(_("Moves the Z axis to the logical MAX position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToTop, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToTop->SetMinSize(wxSize(140,-1));
    
    m_staticText2438 = new wxStaticText(m_panelReference, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), wxALIGN_CENTRE);
    
    flexGridSizer2435->Add(m_staticText2438, 0, wxALL, WXC_FROM_DIP(8));
    m_staticText2438->SetMinSize(wxSize(140,-1));
    
    m_zToBottom = new wxButton(m_panelReference, wxID_ANY, _("Move Z Axis to Bottom"), wxDefaultPosition, wxDLG_UNIT(m_panelReference, wxSize(140,-1)), 0);
    m_zToBottom->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToBottom->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToBottom->SetToolTip(_("Moves the Z axis to the logical MIN position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToBottom, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToBottom->SetMinSize(wxSize(140,-1));
    
    m_panelSetup = new wxPanel(m_mainNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelSetupImgIndex;
    m_panelSetupImgIndex = m_mainNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-cog")));
    m_mainNotebook->AddPage(m_panelSetup, _("Setup"), false, m_panelSetupImgIndex);
    
    flexGridSizer1884 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1884->SetFlexibleDirection( wxBOTH );
    flexGridSizer1884->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1884->AddGrowableCol(0);
    flexGridSizer1884->AddGrowableRow(0);
    m_panelSetup->SetSizer(flexGridSizer1884);
    
    m_listbook2220 = new wxListbook(m_panelSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_listbook2220->SetName(wxT("m_listbook2220"));
    wxImageList* m_listbook2220_il = new wxImageList(16, 16);
    m_listbook2220->AssignImageList(m_listbook2220_il);
    
    flexGridSizer1884->Add(m_listbook2220, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_setupWorkPage = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupWorkPageImgIndex;
    m_setupWorkPageImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-tools")));
    m_listbook2220->AddPage(m_setupWorkPage, _("Working"), false, m_setupWorkPageImgIndex);
    
    flexGridSizer2218 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer2218->SetFlexibleDirection( wxBOTH );
    flexGridSizer2218->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2218->AddGrowableCol(0);
    m_setupWorkPage->SetSizer(flexGridSizer2218);
    
    flexGridSizer961 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer961->SetFlexibleDirection( wxBOTH );
    flexGridSizer961->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer961->AddGrowableCol(0);
    
    flexGridSizer2218->Add(flexGridSizer961, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText7791 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("CNC Working Parameters"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    wxFont m_staticText7791Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText7791->SetFont(m_staticText7791Font);
    
    flexGridSizer961->Add(m_staticText7791, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine9572 = new wxStaticLine(m_setupWorkPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer961->Add(m_staticLine9572, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer963 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer963->SetFlexibleDirection( wxBOTH );
    flexGridSizer963->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer963->AddGrowableCol(0);
    
    flexGridSizer2218->Add(flexGridSizer963, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText569 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Workpiece thickness [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText569->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer963->Add(m_staticText569, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_workpieceThickness = new wxTextCtrl(m_setupWorkPage, wxID_ANY, wxT("0.0"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_workpieceThickness->SetHint(wxT(""));
    #endif
    
    flexGridSizer963->Add(m_workpieceThickness, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1289 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Max crossing thickness [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText1289->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer963->Add(m_staticText1289, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_crossingThickness = new wxTextCtrl(m_setupWorkPage, wxID_ANY, wxT("2.0"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_crossingThickness->SetHint(wxT(""));
    #endif
    
    flexGridSizer963->Add(m_crossingThickness, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText575 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Tool diameter[mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText575->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer963->Add(m_staticText575, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_routerBitDiameter = new wxTextCtrl(m_setupWorkPage, wxID_ANY, wxT("0.0"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_routerBitDiameter->SetHint(wxT(""));
    #endif
    
    flexGridSizer963->Add(m_routerBitDiameter, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    flexGridSizer1423 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1423->SetFlexibleDirection( wxBOTH );
    flexGridSizer1423->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1423->AddGrowableCol(0);
    
    flexGridSizer2218->Add(flexGridSizer1423, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText12374 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Reply Threshold [steps]"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText12374->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1423->Add(m_staticText12374, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_replyThreshold = new wxTextCtrl(m_setupWorkPage, wxID_ANY, wxT("100"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_replyThreshold->SetHint(wxT(""));
    #endif
    
    flexGridSizer1423->Add(m_replyThreshold, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1517 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Reverse X Axis"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText1517->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1423->Add(m_staticText1517, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbStepSignXArr;
    m_cbStepSignXArr.Add(wxT("Yes"));
    m_cbStepSignXArr.Add(wxT("No"));
    m_cbStepSignX = new wxComboBox(m_setupWorkPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), m_cbStepSignXArr, wxCB_READONLY);
    m_cbStepSignX->SetSelection(1);
    
    flexGridSizer1423->Add(m_cbStepSignX, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1519 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Reverse Y Axis"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText1519->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1423->Add(m_staticText1519, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbStepSignYArr;
    m_cbStepSignYArr.Add(wxT("Yes"));
    m_cbStepSignYArr.Add(wxT("No"));
    m_cbStepSignY = new wxComboBox(m_setupWorkPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), m_cbStepSignYArr, wxCB_READONLY);
    m_cbStepSignY->SetSelection(1);
    
    flexGridSizer1423->Add(m_cbStepSignY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1479 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Use Processed Setter List"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText1479->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1423->Add(m_staticText1479, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUseProceesdSetterListArr;
    m_cbUseProceesdSetterListArr.Add(wxT("Yes"));
    m_cbUseProceesdSetterListArr.Add(wxT("No"));
    m_cbUseProceesdSetterList = new wxComboBox(m_setupWorkPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), m_cbUseProceesdSetterListArr, wxCB_READONLY);
    m_cbUseProceesdSetterList->SetSelection(1);
    
    flexGridSizer1423->Add(m_cbUseProceesdSetterList, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1475 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("Clear Processed Setter List before each Run"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    m_staticText1475->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1423->Add(m_staticText1475, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbClearProceesdSetterListArr;
    m_cbClearProceesdSetterListArr.Add(wxT("Yes"));
    m_cbClearProceesdSetterListArr.Add(wxT("No"));
    m_cbClearProceesdSetterList = new wxComboBox(m_setupWorkPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(100,-1)), m_cbClearProceesdSetterListArr, wxCB_READONLY);
    m_cbClearProceesdSetterList->SetSelection(0);
    
    flexGridSizer1423->Add(m_cbClearProceesdSetterList, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    flexGridSizer96131 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer96131->SetFlexibleDirection( wxBOTH );
    flexGridSizer96131->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer96131->AddGrowableCol(0);
    
    flexGridSizer2218->Add(flexGridSizer96131, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText779142 = new wxStaticText(m_setupWorkPage, wxID_ANY, _("CNC Controller Parameters"), wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), 0);
    wxFont m_staticText779142Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText779142->SetFont(m_staticText779142Font);
    
    flexGridSizer96131->Add(m_staticText779142, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine957253 = new wxStaticLine(m_setupWorkPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupWorkPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer96131->Add(m_staticLine957253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_setupSpeedPage = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupSpeedPageImgIndex;
    m_setupSpeedPageImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("graph_bars")));
    m_listbook2220->AddPage(m_setupSpeedPage, _("Speed"), false, m_setupSpeedPageImgIndex);
    
    flexGridSizer2237 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2237->SetFlexibleDirection( wxBOTH );
    flexGridSizer2237->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2237->AddGrowableCol(0);
    m_setupSpeedPage->SetSizer(flexGridSizer2237);
    
    flexGridSizer96114 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer96114->SetFlexibleDirection( wxBOTH );
    flexGridSizer96114->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer96114->AddGrowableCol(0);
    
    flexGridSizer2237->Add(flexGridSizer96114, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText779125 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("CNC Speed Configuration"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    wxFont m_staticText779125Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText779125->SetFont(m_staticText779125Font);
    
    flexGridSizer96114->Add(m_staticText779125, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine957236 = new wxStaticLine(m_setupSpeedPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer96114->Add(m_staticLine957236, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer1387 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1387->SetFlexibleDirection( wxBOTH );
    flexGridSizer1387->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1387->AddGrowableCol(0);
    
    flexGridSizer2237->Add(flexGridSizer1387, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText924 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Max XY Speed [rpm]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText924->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1387->Add(m_staticText924, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_maxXYSpeed = new wxTextCtrl(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_maxXYSpeed->SetHint(wxT(""));
    #endif
    
    flexGridSizer1387->Add(m_maxXYSpeed, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_maxXYSpeed->SetMinSize(wxSize(100,-1));
    
    m_staticText928 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Fly Speed XY [%]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText928->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1387->Add(m_staticText928, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_flySpeedXYArr;
    m_flySpeedXYArr.Add(wxT("100"));
    m_flySpeedXYArr.Add(wxT("90"));
    m_flySpeedXYArr.Add(wxT("80"));
    m_flySpeedXYArr.Add(wxT("70"));
    m_flySpeedXYArr.Add(wxT("60"));
    m_flySpeedXYArr.Add(wxT("50"));
    m_flySpeedXYArr.Add(wxT("40"));
    m_flySpeedXYArr.Add(wxT("30"));
    m_flySpeedXYArr.Add(wxT("20"));
    m_flySpeedXYArr.Add(wxT("10"));
    m_flySpeedXYArr.Add(wxT("5"));
    m_flySpeedXYArr.Add(wxT("1"));
    m_flySpeedXYArr.Add(wxT("0.5"));
    m_flySpeedXYArr.Add(wxT("0.1"));
    m_flySpeedXY = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_flySpeedXYArr, wxCB_READONLY);
    
    flexGridSizer1387->Add(m_flySpeedXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_flySpeedXY->SetMinSize(wxSize(100,-1));
    
    m_staticText932 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Work Speed XY [%]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText932->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1387->Add(m_staticText932, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_workSpeedXYArr;
    m_workSpeedXYArr.Add(wxT("100"));
    m_workSpeedXYArr.Add(wxT("90"));
    m_workSpeedXYArr.Add(wxT("80"));
    m_workSpeedXYArr.Add(wxT("70"));
    m_workSpeedXYArr.Add(wxT("60"));
    m_workSpeedXYArr.Add(wxT("50"));
    m_workSpeedXYArr.Add(wxT("40"));
    m_workSpeedXYArr.Add(wxT("30"));
    m_workSpeedXYArr.Add(wxT("20"));
    m_workSpeedXYArr.Add(wxT("10"));
    m_workSpeedXYArr.Add(wxT("5"));
    m_workSpeedXYArr.Add(wxT("1"));
    m_workSpeedXYArr.Add(wxT("0,5"));
    m_workSpeedXYArr.Add(wxT("0,1"));
    m_workSpeedXY = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_workSpeedXYArr, wxCB_READONLY);
    
    flexGridSizer1387->Add(m_workSpeedXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_workSpeedXY->SetMinSize(wxSize(100,-1));
    
    m_staticText1019 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Current Speed Mode XY"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText1019->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1387->Add(m_staticText1019, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_currentSpeedXYArr;
    m_currentSpeedXYArr.Add(wxT("Fly"));
    m_currentSpeedXYArr.Add(wxT("Work"));
    m_currentSpeedXY = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_currentSpeedXYArr, wxCB_READONLY);
    m_currentSpeedXY->SetSelection(0);
    
    flexGridSizer1387->Add(m_currentSpeedXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_currentSpeedXY->SetMinSize(wxSize(100,-1));
    
    flexGridSizer265915 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer265915->SetFlexibleDirection( wxBOTH );
    flexGridSizer265915->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer265915->AddGrowableCol(0);
    flexGridSizer265915->AddGrowableRow(0);
    
    flexGridSizer2237->Add(flexGridSizer265915, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_button266116 = new wxButton(m_setupSpeedPage, wxID_ANY, _("Configure XY axis with Z values"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button266116->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_button266116->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer265915->Add(m_button266116, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    flexGridSizer2237->Add(0, 20, 1, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer2241 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2241->SetFlexibleDirection( wxBOTH );
    flexGridSizer2241->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2241->AddGrowableCol(0);
    
    flexGridSizer2237->Add(flexGridSizer2241, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1208 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Max Z Speed [rpm]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText1208->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2241->Add(m_staticText1208, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_maxZSpeed = new wxTextCtrl(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_maxZSpeed->SetHint(wxT(""));
    #endif
    
    flexGridSizer2241->Add(m_maxZSpeed, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_maxZSpeed->SetMinSize(wxSize(100,-1));
    
    m_staticText92813 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Fly Speed Z [%]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText92813->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2241->Add(m_staticText92813, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_flySpeedZArr;
    m_flySpeedZArr.Add(wxT("100"));
    m_flySpeedZArr.Add(wxT("90"));
    m_flySpeedZArr.Add(wxT("80"));
    m_flySpeedZArr.Add(wxT("70"));
    m_flySpeedZArr.Add(wxT("60"));
    m_flySpeedZArr.Add(wxT("50"));
    m_flySpeedZArr.Add(wxT("40"));
    m_flySpeedZArr.Add(wxT("30"));
    m_flySpeedZArr.Add(wxT("20"));
    m_flySpeedZArr.Add(wxT("10"));
    m_flySpeedZArr.Add(wxT("5"));
    m_flySpeedZArr.Add(wxT("1"));
    m_flySpeedZArr.Add(wxT("0.5"));
    m_flySpeedZArr.Add(wxT("0.1"));
    m_flySpeedZ = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_flySpeedZArr, wxCB_READONLY);
    
    flexGridSizer2241->Add(m_flySpeedZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_flySpeedZ->SetMinSize(wxSize(100,-1));
    
    m_staticText1213 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Work Speed Z [%]"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText1213->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2241->Add(m_staticText1213, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_workSpeedZArr;
    m_workSpeedZArr.Add(wxT("100"));
    m_workSpeedZArr.Add(wxT("90"));
    m_workSpeedZArr.Add(wxT("80"));
    m_workSpeedZArr.Add(wxT("70"));
    m_workSpeedZArr.Add(wxT("60"));
    m_workSpeedZArr.Add(wxT("50"));
    m_workSpeedZArr.Add(wxT("40"));
    m_workSpeedZArr.Add(wxT("30"));
    m_workSpeedZArr.Add(wxT("20"));
    m_workSpeedZArr.Add(wxT("10"));
    m_workSpeedZArr.Add(wxT("5"));
    m_workSpeedZArr.Add(wxT("1"));
    m_workSpeedZArr.Add(wxT("0.5"));
    m_workSpeedZArr.Add(wxT("0.1"));
    m_workSpeedZ = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_workSpeedZArr, wxCB_READONLY);
    
    flexGridSizer2241->Add(m_workSpeedZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_workSpeedZ->SetMinSize(wxSize(100,-1));
    
    m_staticText101911 = new wxStaticText(m_setupSpeedPage, wxID_ANY, _("Current Speed Mode Z"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    m_staticText101911->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2241->Add(m_staticText101911, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_currentSpeedZArr;
    m_currentSpeedZArr.Add(wxT("Fly"));
    m_currentSpeedZArr.Add(wxT("Work"));
    m_currentSpeedZ = new wxComboBox(m_setupSpeedPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(100,-1)), m_currentSpeedZArr, wxCB_READONLY);
    m_currentSpeedZ->SetSelection(0);
    
    flexGridSizer2241->Add(m_currentSpeedZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_currentSpeedZ->SetMinSize(wxSize(100,-1));
    
    flexGridSizer2659 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2659->SetFlexibleDirection( wxBOTH );
    flexGridSizer2659->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2659->AddGrowableCol(0);
    flexGridSizer2659->AddGrowableRow(0);
    
    flexGridSizer2237->Add(flexGridSizer2659, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_button2661 = new wxButton(m_setupSpeedPage, wxID_ANY, _("Configure Z axis with XY values"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedPage, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button2661->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_button2661->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer2659->Add(m_button2661, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_setupDimPage = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupDimPageImgIndex;
    m_setupDimPageImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_blue_NE_SE_SW_NW")));
    m_listbook2220->AddPage(m_setupDimPage, _("Dimensions"), false, m_setupDimPageImgIndex);
    
    flexGridSizer2234 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2234->SetFlexibleDirection( wxBOTH );
    flexGridSizer2234->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2234->AddGrowableCol(0);
    m_setupDimPage->SetSizer(flexGridSizer2234);
    
    flexGridSizer9611 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer9611->SetFlexibleDirection( wxBOTH );
    flexGridSizer9611->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9611->AddGrowableCol(0);
    
    flexGridSizer2234->Add(flexGridSizer9611, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText77912 = new wxStaticText(m_setupDimPage, wxID_ANY, _("CNC Dimensions"), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(-1,-1)), 0);
    wxFont m_staticText77912Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText77912->SetFont(m_staticText77912Font);
    
    flexGridSizer9611->Add(m_staticText77912, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine95723 = new wxStaticLine(m_setupDimPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer9611->Add(m_staticLine95723, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer1380 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1380->SetFlexibleDirection( wxBOTH );
    flexGridSizer1380->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1380->AddGrowableCol(0);
    
    flexGridSizer2234->Add(flexGridSizer1380, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText854 = new wxStaticText(m_setupDimPage, wxID_ANY, _("Max X dimension from Zero [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(-1,-1)), 0);
    m_staticText854->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1380->Add(m_staticText854, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_maxXDimension = new wxTextCtrl(m_setupDimPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_maxXDimension->SetHint(wxT(""));
    #endif
    
    flexGridSizer1380->Add(m_maxXDimension, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_maxXDimension->SetMinSize(wxSize(100,-1));
    
    m_staticText856 = new wxStaticText(m_setupDimPage, wxID_ANY, _("Max Y dimension from Zero [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(-1,-1)), 0);
    m_staticText856->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1380->Add(m_staticText856, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_maxYDimension = new wxTextCtrl(m_setupDimPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_maxYDimension->SetHint(wxT(""));
    #endif
    
    flexGridSizer1380->Add(m_maxYDimension, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_maxYDimension->SetMinSize(wxSize(100,-1));
    
    m_staticText85611 = new wxStaticText(m_setupDimPage, wxID_ANY, _("Max Z dimension from Zero [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(-1,-1)), 0);
    m_staticText85611->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1380->Add(m_staticText85611, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_maxZDimension = new wxTextCtrl(m_setupDimPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupDimPage, wxSize(100,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_maxZDimension->SetHint(wxT(""));
    #endif
    
    flexGridSizer1380->Add(m_maxZDimension, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_maxZDimension->SetMinSize(wxSize(100,-1));
    
    m_setupSVGPage = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupSVGPageImgIndex;
    m_setupSVGPageImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-blocks")));
    m_listbook2220->AddPage(m_setupSVGPage, _("SVG"), false, m_setupSVGPageImgIndex);
    
    flexGridSizer2229 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2229->SetFlexibleDirection( wxBOTH );
    flexGridSizer2229->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2229->AddGrowableCol(0);
    m_setupSVGPage->SetSizer(flexGridSizer2229);
    
    flexGridSizer9613 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer9613->SetFlexibleDirection( wxBOTH );
    flexGridSizer9613->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9613->AddGrowableCol(0);
    
    flexGridSizer2229->Add(flexGridSizer9613, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText77914 = new wxStaticText(m_setupSVGPage, wxID_ANY, _("SVG Emulator Parameters"), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(-1,-1)), 0);
    wxFont m_staticText77914Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText77914->SetFont(m_staticText77914Font);
    
    flexGridSizer9613->Add(m_staticText77914, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine95725 = new wxStaticLine(m_setupSVGPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer9613->Add(m_staticLine95725, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer9636 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer9636->SetFlexibleDirection( wxBOTH );
    flexGridSizer9636->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9636->AddGrowableCol(0);
    
    flexGridSizer2229->Add(flexGridSizer9636, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1237 = new wxStaticText(m_setupSVGPage, wxID_ANY, _("Copy factor:"), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(-1,-1)), 0);
    m_staticText1237->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer9636->Add(m_staticText1237, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbSvgZoomArr;
    m_cbSvgZoomArr.Add(wxT("0.1"));
    m_cbSvgZoomArr.Add(wxT("0.25"));
    m_cbSvgZoomArr.Add(wxT("0.5"));
    m_cbSvgZoomArr.Add(wxT("1.0"));
    m_cbSvgZoomArr.Add(wxT("2.0"));
    m_cbSvgZoomArr.Add(wxT("4.0"));
    m_cbSvgZoom = new wxComboBox(m_setupSVGPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(100,-1)), m_cbSvgZoomArr, wxCB_READONLY);
    m_cbSvgZoom->SetSelection(3);
    
    flexGridSizer9636->Add(m_cbSvgZoom, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText1261 = new wxStaticText(m_setupSVGPage, wxID_ANY, _("Result includes the original path:"), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(-1,-1)), 0);
    m_staticText1261->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer9636->Add(m_staticText1261, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbSvgIncludeOriginalPathArr;
    m_cbSvgIncludeOriginalPathArr.Add(wxT("Yes"));
    m_cbSvgIncludeOriginalPathArr.Add(wxT("No"));
    m_cbSvgIncludeOriginalPath = new wxComboBox(m_setupSVGPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(100,-1)), m_cbSvgIncludeOriginalPathArr, wxCB_READONLY);
    m_cbSvgIncludeOriginalPath->SetSelection(0);
    
    flexGridSizer9636->Add(m_cbSvgIncludeOriginalPath, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText126111 = new wxStaticText(m_setupSVGPage, wxID_ANY, _("Result includes only the first crossing:"), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(-1,-1)), 0);
    m_staticText126111->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer9636->Add(m_staticText126111, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbSvgFirstCrossingArr;
    m_cbSvgFirstCrossingArr.Add(wxT("Yes"));
    m_cbSvgFirstCrossingArr.Add(wxT("No"));
    m_cbSvgFirstCrossing = new wxComboBox(m_setupSVGPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSVGPage, wxSize(100,-1)), m_cbSvgFirstCrossingArr, wxCB_READONLY);
    m_cbSvgFirstCrossing->SetSelection(0);
    
    flexGridSizer9636->Add(m_cbSvgFirstCrossing, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_setupEnvPage = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupEnvPageImgIndex;
    m_setupEnvPageImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-console")));
    m_listbook2220->AddPage(m_setupEnvPage, _("Envrionment"), false, m_setupEnvPageImgIndex);
    
    flexGridSizer2232 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2232->SetFlexibleDirection( wxBOTH );
    flexGridSizer2232->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2232->AddGrowableCol(0);
    flexGridSizer2232->AddGrowableRow(0);
    m_setupEnvPage->SetSizer(flexGridSizer2232);
    
    flexGridSizer1873 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1873->SetFlexibleDirection( wxBOTH );
    flexGridSizer1873->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1873->AddGrowableCol(0);
    flexGridSizer1873->AddGrowableRow(2);
    
    flexGridSizer2232->Add(flexGridSizer1873, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1880 = new wxStaticText(m_setupEnvPage, wxID_ANY, _("CNC Environment Info"), wxDefaultPosition, wxDLG_UNIT(m_setupEnvPage, wxSize(-1,-1)), 0);
    wxFont m_staticText1880Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText1880->SetFont(m_staticText1880Font);
    
    flexGridSizer1873->Add(m_staticText1880, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine2226 = new wxStaticLine(m_setupEnvPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupEnvPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1873->Add(m_staticLine2226, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_envrionmentInfo = new wxTextCtrl(m_setupEnvPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupEnvPage, wxSize(-1,120)), wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_envrionmentInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_envrionmentInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_envrionmentInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_envrionmentInfo->SetFont(m_envrionmentInfoFont);
    
    flexGridSizer1873->Add(m_envrionmentInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_setupApp = new wxPanel(m_listbook2220, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook2220, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupAppImgIndex;
    m_setupAppImgIndex = m_listbook2220_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-checkbox")));
    m_listbook2220->AddPage(m_setupApp, _("Application"), false, m_setupAppImgIndex);
    
    flexGridSizer2627 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2627->SetFlexibleDirection( wxBOTH );
    flexGridSizer2627->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2627->AddGrowableCol(0);
    m_setupApp->SetSizer(flexGridSizer2627);
    
    flexGridSizer96111 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer96111->SetFlexibleDirection( wxBOTH );
    flexGridSizer96111->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer96111->AddGrowableCol(0);
    
    flexGridSizer2627->Add(flexGridSizer96111, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText779122 = new wxStaticText(m_setupApp, wxID_ANY, _("Application Parameters"), wxDefaultPosition, wxDLG_UNIT(m_setupApp, wxSize(-1,-1)), 0);
    wxFont m_staticText779122Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText779122->SetFont(m_staticText779122Font);
    
    flexGridSizer96111->Add(m_staticText779122, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine957233 = new wxStaticLine(m_setupApp, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupApp, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer96111->Add(m_staticLine957233, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2635 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2635->SetFlexibleDirection( wxBOTH );
    flexGridSizer2635->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2635->AddGrowableCol(0);
    
    flexGridSizer2627->Add(flexGridSizer2635, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer96364 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer96364->SetFlexibleDirection( wxBOTH );
    flexGridSizer96364->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer96364->AddGrowableCol(0);
    
    flexGridSizer2635->Add(flexGridSizer96364, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText12375 = new wxStaticText(m_setupApp, wxID_ANY, _("Run confirmation mode:"), wxDefaultPosition, wxDLG_UNIT(m_setupApp, wxSize(-1,-1)), 0);
    m_staticText12375->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer96364->Add(m_staticText12375, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbRunConfirmationModeArr;
    m_cbRunConfirmationModeArr.Add(wxT("a) Always"));
    m_cbRunConfirmationModeArr.Add(wxT("b) Never"));
    m_cbRunConfirmationModeArr.Add(wxT("c) SerialPort only"));
    m_cbRunConfirmationMode = new wxComboBox(m_setupApp, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupApp, wxSize(100,-1)), m_cbRunConfirmationModeArr, wxCB_READONLY);
    m_cbRunConfirmationMode->SetSelection(2);
    
    flexGridSizer96364->Add(m_cbRunConfirmationMode, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_panelTesting = new wxPanel(m_mainNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTestingImgIndex;
    m_panelTestingImgIndex = m_mainNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_mainNotebook->AddPage(m_panelTesting, _("Test Suite"), false, m_panelTestingImgIndex);
    
    flexGridSizer2205 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2205->SetFlexibleDirection( wxBOTH );
    flexGridSizer2205->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2205->AddGrowableCol(0);
    flexGridSizer2205->AddGrowableRow(0);
    m_panelTesting->SetSizer(flexGridSizer2205);
    
    m_treebookTest = new wxTreebook(m_panelTesting, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTesting, wxSize(-1,-1)), wxBK_LEFT);
    m_treebookTest->SetName(wxT("m_treebookTest"));
    wxImageList* m_treebookTest_il = new wxImageList(16, 16);
    m_treebookTest->AssignImageList(m_treebookTest_il);
    
    flexGridSizer2205->Add(m_treebookTest, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testIntervalPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testIntervalPageImgIndex;
    m_testIntervalPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testIntervalPage, _("Interval"), false, m_testIntervalPageImgIndex);
    
    flexGridSizer2089 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2089->SetFlexibleDirection( wxBOTH );
    flexGridSizer2089->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2089->AddGrowableCol(0);
    m_testIntervalPage->SetSizer(flexGridSizer2089);
    
    flexGridSizer2157 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2157->SetFlexibleDirection( wxBOTH );
    flexGridSizer2157->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2157->AddGrowableCol(0);
    
    flexGridSizer2089->Add(flexGridSizer2157, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2117 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Test::Interval Move:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    wxFont m_staticText2117Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText2117->SetFont(m_staticText2117Font);
    
    flexGridSizer2157->Add(m_staticText2117, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine2253 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2157->Add(m_staticLine2253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxArrayString m_testIntervalModeArr;
    m_testIntervalModeArr.Add(wxT("A: loop(+/-x), loop(+/-y),loop(+/-z)"));
    m_testIntervalModeArr.Add(wxT("B: loop(+x,+y,+z) loop(-x,-y,-z)"));
    m_testIntervalModeArr.Add(wxT("C: loop(+/-x,y,z)"));
    m_testIntervalMode = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testIntervalModeArr, wxCB_READONLY);
    m_testIntervalMode->SetSelection(0);
    
    flexGridSizer2157->Add(m_testIntervalMode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2103 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2103->SetFlexibleDirection( wxBOTH );
    flexGridSizer2103->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2103, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2105 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2105, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2105->SetMinSize(wxSize(20,-1));
    
    m_staticText2107 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Count"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(65,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2107, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2107->SetMinSize(wxSize(65,-1));
    
    m_staticText2109 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Distance (+/-)"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(93,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2109, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2109->SetMinSize(wxSize(93,-1));
    
    m_staticText2149 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("First Direction"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(82,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2149, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2149->SetMinSize(wxSize(82,-1));
    
    m_staticText2115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(54,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2115, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2115->SetMinSize(wxSize(54,-1));
    
    m_staticText2165 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Counter"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2165, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine2111 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2089->Add(m_staticLine2111, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2091 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2091->SetFlexibleDirection( wxBOTH );
    flexGridSizer2091->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2091, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisX->SetFont(m_testAxisXFont);
    
    flexGridSizer2091->Add(m_testAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisX->SetMinSize(wxSize(20,-1));
    
    m_testCountX = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountX->SetRange(0, 100);
    m_testCountX->SetValue(1);
    
    flexGridSizer2091->Add(m_testCountX, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountX->SetMinSize(wxSize(70,-1));
    
    m_testDistanceX = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2091->Add(m_testDistanceX, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceX->SetMinSize(wxSize(70,-1));
    
    m_staticText2101 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2101, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstXArr;
    m_testFirstXArr.Add(wxT("First +"));
    m_testFirstXArr.Add(wxT("First -"));
    m_testFirstX = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstXArr, wxCB_READONLY);
    m_testFirstX->SetSelection(0);
    
    flexGridSizer2091->Add(m_testFirstX, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText2151 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2151, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeX = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeX->SetValue(true);
    
    flexGridSizer2091->Add(m_testModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer2091->Add(m_testDurationCounterX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterX->SetMinSize(wxSize(40,-1));
    
    flexGridSizer209111 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer209111->SetFlexibleDirection( wxBOTH );
    flexGridSizer209111->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer209111, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisY->SetFont(m_testAxisYFont);
    
    flexGridSizer209111->Add(m_testAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisY->SetMinSize(wxSize(20,-1));
    
    m_testCountY = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountY->SetRange(0, 100);
    m_testCountY->SetValue(1);
    
    flexGridSizer209111->Add(m_testCountY, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountY->SetMinSize(wxSize(70,-1));
    
    m_testDistanceY = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceY->SetHint(wxT(""));
    #endif
    
    flexGridSizer209111->Add(m_testDistanceY, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceY->SetMinSize(wxSize(70,-1));
    
    m_staticText210115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText210115, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstYArr;
    m_testFirstYArr.Add(wxT("First +"));
    m_testFirstYArr.Add(wxT("First -"));
    m_testFirstY = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstYArr, wxCB_READONLY);
    m_testFirstY->SetSelection(0);
    
    flexGridSizer209111->Add(m_testFirstY, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215123 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText215123, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeY = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeY->SetValue(true);
    
    flexGridSizer209111->Add(m_testModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer209111->Add(m_testDurationCounterY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterY->SetMinSize(wxSize(40,-1));
    
    flexGridSizer20911117 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer20911117->SetFlexibleDirection( wxBOTH );
    flexGridSizer20911117->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer20911117, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisZ->SetFont(m_testAxisZFont);
    
    flexGridSizer20911117->Add(m_testAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testCountZ = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountZ->SetRange(0, 100);
    m_testCountZ->SetValue(1);
    
    flexGridSizer20911117->Add(m_testCountZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountZ->SetMinSize(wxSize(70,-1));
    
    m_testDistanceZ = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer20911117->Add(m_testDistanceZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceZ->SetMinSize(wxSize(70,-1));
    
    m_staticText21011521 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText21011521, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstZArr;
    m_testFirstZArr.Add(wxT("First +"));
    m_testFirstZArr.Add(wxT("First -"));
    m_testFirstZ = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstZArr, wxCB_READONLY);
    m_testFirstZ->SetSelection(0);
    
    flexGridSizer20911117->Add(m_testFirstZ, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215124 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText215124, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeZ = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeZ->SetValue(true);
    
    flexGridSizer20911117->Add(m_testModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer20911117->Add(m_testDurationCounterZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterZ->SetMinSize(wxSize(40,-1));
    
    m_testDimensions = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testDimensionsImgIndex;
    m_testDimensionsImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testDimensions, _("Dimensions"), false, m_testDimensionsImgIndex);
    
    flexGridSizer2319 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2319->SetFlexibleDirection( wxBOTH );
    flexGridSizer2319->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2319->AddGrowableCol(0);
    m_testDimensions->SetSizer(flexGridSizer2319);
    
    flexGridSizer21573 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21573->SetFlexibleDirection( wxBOTH );
    flexGridSizer21573->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21573->AddGrowableCol(0);
    
    flexGridSizer2319->Add(flexGridSizer21573, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21174 = new wxStaticText(m_testDimensions, wxID_ANY, _("Test::Meassure max Dimensions:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    wxFont m_staticText21174Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21174->SetFont(m_staticText21174Font);
    
    flexGridSizer21573->Add(m_staticText21174, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22535 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21573->Add(m_staticLine22535, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2375 = new wxFlexGridSizer(0, 6, 0, 0);
    flexGridSizer2375->SetFlexibleDirection( wxBOTH );
    flexGridSizer2375->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2375->AddGrowableCol(5);
    
    flexGridSizer2319->Add(flexGridSizer2375, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2377 = new wxStaticText(m_testDimensions, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2377, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2418 = new wxStaticText(m_testDimensions, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(54,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2418, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2418->SetMinSize(wxSize(54,-1));
    
    m_staticText2381 = new wxStaticText(m_testDimensions, wxID_ANY, _("Min reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2381, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2381->SetMinSize(wxSize(90,-1));
    
    m_staticText2379 = new wxStaticText(m_testDimensions, wxID_ANY, _("Max reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2379, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2379->SetMinSize(wxSize(90,-1));
    
    m_staticText2383 = new wxStaticText(m_testDimensions, wxID_ANY, _("Result Value"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(120,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2383, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2383->SetMinSize(wxSize(190,-1));
    
    m_testDimTakeOverAndSave = new wxCheckBox(m_testDimensions, wxID_ANY, _("Take over and Save?"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeOverAndSave->SetValue(false);
    
    flexGridSizer2375->Add(m_testDimTakeOverAndSave, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_staticLine2385 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2385, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2363 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2363->SetFlexibleDirection( wxBOTH );
    flexGridSizer2363->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2363->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer2363, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisX = new wxStaticText(m_testDimensions, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisX->SetFont(m_testDimAxisXFont);
    
    flexGridSizer2363->Add(m_testDimAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisX->SetMinSize(wxSize(20,-1));
    
    m_testDimModeX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeX->SetValue(true);
    
    flexGridSizer2363->Add(m_testDimModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinX->SetValue(false);
    m_testDimMinX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMinX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinX->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxX->SetValue(false);
    m_testDimMaxX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMaxX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxX->SetMinSize(wxSize(90,-1));
    
    m_testDimResultX = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2363->Add(m_testDimResultX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText2431 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2363->Add(m_staticText2431, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateX->SetValue(false);
    m_testDimResultStateX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimResultStateX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeX = new wxButton(m_testDimensions, wxID_ANY, _("Take over X"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeX->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeX->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2363->Add(m_testDimTakeX, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    flexGridSizer23631 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23631->SetFlexibleDirection( wxBOTH );
    flexGridSizer23631->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23631->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23631, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisY = new wxStaticText(m_testDimensions, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisY->SetFont(m_testDimAxisYFont);
    
    flexGridSizer23631->Add(m_testDimAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisY->SetMinSize(wxSize(20,-1));
    
    m_testDimModeY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeY->SetValue(true);
    
    flexGridSizer23631->Add(m_testDimModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinY->SetValue(false);
    m_testDimMinY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMinY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinY->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxY->SetValue(false);
    m_testDimMaxY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMaxY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxY->SetMinSize(wxSize(90,-1));
    
    m_testDimResultY = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultY->SetHint(wxT(""));
    #endif
    
    flexGridSizer23631->Add(m_testDimResultY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX6 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23631->Add(m_testDimUnitX6, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateY->SetValue(false);
    m_testDimResultStateY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimResultStateY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeY = new wxButton(m_testDimensions, wxID_ANY, _("Take over Y"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeY->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeY->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23631->Add(m_testDimTakeY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    flexGridSizer23637 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23637->SetFlexibleDirection( wxBOTH );
    flexGridSizer23637->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23637->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23637, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisZ = new wxStaticText(m_testDimensions, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisZ->SetFont(m_testDimAxisZFont);
    
    flexGridSizer23637->Add(m_testDimAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testDimModeZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeZ->SetValue(true);
    
    flexGridSizer23637->Add(m_testDimModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinZ->SetValue(false);
    m_testDimMinZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMinZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinZ->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxZ->SetValue(false);
    m_testDimMaxZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMaxZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxZ->SetMinSize(wxSize(90,-1));
    
    m_testDimResultZ = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer23637->Add(m_testDimResultZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX12 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23637->Add(m_testDimUnitX12, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateZ->SetValue(false);
    m_testDimResultStateZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimResultStateZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeZ = new wxButton(m_testDimensions, wxID_ANY, _("Take over Z"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeZ->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeZ->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23637->Add(m_testDimTakeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticLine2429 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2429, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimTakeAll = new wxButton(m_testDimensions, wxID_ANY, _("Take over All"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeAll->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_testDimTakeAll->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_testDimTakeAll->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2319->Add(m_testDimTakeAll, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_testLimitPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testLimitPageImgIndex;
    m_testLimitPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testLimitPage, _("Limit"), false, m_testLimitPageImgIndex);
    
    flexGridSizer2249 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2249->SetFlexibleDirection( wxBOTH );
    flexGridSizer2249->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2249->AddGrowableCol(0);
    flexGridSizer2249->AddGrowableRow(1);
    m_testLimitPage->SetSizer(flexGridSizer2249);
    
    flexGridSizer21571 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21571->SetFlexibleDirection( wxBOTH );
    flexGridSizer21571->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21571->AddGrowableCol(0);
    
    flexGridSizer2249->Add(flexGridSizer21571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21172 = new wxStaticText(m_testLimitPage, wxID_ANY, _("Test::Evaluate End Switch States:"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    wxFont m_staticText21172Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21172->SetFont(m_staticText21172Font);
    
    flexGridSizer21571->Add(m_staticText21172, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22533 = new wxStaticLine(m_testLimitPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21571->Add(m_staticLine22533, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2269 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2269->SetFlexibleDirection( wxBOTH );
    flexGridSizer2269->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2269->AddGrowableCol(0);
    flexGridSizer2269->AddGrowableRow(0);
    
    flexGridSizer2249->Add(flexGridSizer2269, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleEndSwitch = new wxToggleButton(m_testLimitPage, wxID_ANY, _("Start End Switch Evaluation"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    m_testToggleEndSwitch->SetBackgroundColour(wxColour(wxT("rgb(128,255,0)")));
    m_testToggleEndSwitch->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_testToggleEndSwitchFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleEndSwitch->SetFont(m_testToggleEndSwitchFont);
    m_testToggleEndSwitch->SetValue(false);
    
    flexGridSizer2269->Add(m_testToggleEndSwitch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToolPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testToolPageImgIndex;
    m_testToolPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testToolPage, _("Tool"), false, m_testToolPageImgIndex);
    
    flexGridSizer2251 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2251->SetFlexibleDirection( wxBOTH );
    flexGridSizer2251->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2251->AddGrowableCol(0);
    flexGridSizer2251->AddGrowableRow(1);
    m_testToolPage->SetSizer(flexGridSizer2251);
    
    flexGridSizer215715 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer215715->SetFlexibleDirection( wxBOTH );
    flexGridSizer215715->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer215715->AddGrowableCol(0);
    
    flexGridSizer2251->Add(flexGridSizer215715, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText211726 = new wxStaticText(m_testToolPage, wxID_ANY, _("Test::Running Tool:"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    wxFont m_staticText211726Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText211726->SetFont(m_staticText211726Font);
    
    flexGridSizer215715->Add(m_staticText211726, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine225337 = new wxStaticLine(m_testToolPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer215715->Add(m_staticLine225337, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2275 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2275->SetFlexibleDirection( wxBOTH );
    flexGridSizer2275->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2275->AddGrowableCol(0);
    flexGridSizer2275->AddGrowableRow(0);
    
    flexGridSizer2251->Add(flexGridSizer2275, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleTool = new wxToggleButton(m_testToolPage, wxID_ANY, _("Switch Tool On"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    m_testToggleTool->SetBackgroundColour(wxColour(wxT("rgb(255,0,0)")));
    m_testToggleTool->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testToggleToolFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleTool->SetFont(m_testToggleToolFont);
    m_testToggleTool->SetValue(false);
    
    flexGridSizer2275->Add(m_testToggleTool, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestSuite = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_ctrlTestSuiteImgIndex;
    m_ctrlTestSuiteImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-class")));
    m_treebookTest->AddPage(m_ctrlTestSuite, _("Ctrl Test Suite"), false, m_ctrlTestSuiteImgIndex);
    
    flexGridSizer24722 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer24722->SetFlexibleDirection( wxBOTH );
    flexGridSizer24722->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24722->AddGrowableCol(0);
    m_ctrlTestSuite->SetSizer(flexGridSizer24722);
    
    flexGridSizer21573253 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21573253->SetFlexibleDirection( wxBOTH );
    flexGridSizer21573253->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21573253->AddGrowableCol(0);
    
    flexGridSizer24722->Add(flexGridSizer21573253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer25094 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer25094->SetFlexibleDirection( wxBOTH );
    flexGridSizer25094->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer25094->AddGrowableCol(1);
    
    flexGridSizer21573253->Add(flexGridSizer25094, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText21174365 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("The underlying tests running under CNC TestSuite control"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText21174365Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21174365->SetFont(m_staticText21174365Font);
    
    flexGridSizer25094->Add(m_staticText21174365, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_ctrlTestSelectedId = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    m_ctrlTestSelectedId->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestSelectedId->SetHint(wxT(""));
    #endif
    
    flexGridSizer25094->Add(m_ctrlTestSelectedId, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticLine22535477 = new wxStaticLine(m_ctrlTestSuite, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21573253->Add(m_staticLine22535477, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer24808 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer24808->SetFlexibleDirection( wxBOTH );
    flexGridSizer24808->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24808->AddGrowableCol(0);
    flexGridSizer24808->AddGrowableRow(1);
    
    flexGridSizer24722->Add(flexGridSizer24808, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText25139 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Cases:"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText25139Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText25139Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText25139->SetFont(m_staticText25139Font);
    
    flexGridSizer24808->Add(m_staticText25139, 0, wxALL, WXC_FROM_DIP(2));
    
    m_scrollWin2571 = new wxScrolledWindow(m_ctrlTestSuite, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,120)), wxHSCROLL|wxVSCROLL);
    m_scrollWin2571->SetScrollRate(5, 5);
    
    flexGridSizer24808->Add(m_scrollWin2571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer2573 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2573->SetFlexibleDirection( wxBOTH );
    flexGridSizer2573->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2573->AddGrowableCol(0);
    flexGridSizer2573->AddGrowableRow(0);
    m_scrollWin2571->SetSizer(flexGridSizer2573);
    
    wxArrayString m_ctrlTestSelectionArr;
    m_ctrlTestSelection = new wxListBox(m_scrollWin2571, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin2571, wxSize(-1,-1)), m_ctrlTestSelectionArr, wxLB_HSCROLL|wxLB_SINGLE|wxHSCROLL|wxVSCROLL);
    m_ctrlTestSelection->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_ctrlTestSelectionFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_ctrlTestSelectionFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_ctrlTestSelection->SetFont(m_ctrlTestSelectionFont);
    
    flexGridSizer2573->Add(m_ctrlTestSelection, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_scrollWin2571->SetMinSize(wxSize(-1,120));
    
    m_staticText251911 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Description:"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText251911Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText251911Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText251911->SetFont(m_staticText251911Font);
    
    flexGridSizer24808->Add(m_staticText251911, 0, wxALL, WXC_FROM_DIP(5));
    
    m_ctrlTestDescription = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,100)), wxTE_READONLY|wxTE_MULTILINE);
    m_ctrlTestDescription->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer24808->Add(m_ctrlTestDescription, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_ctrlTestDescription->SetMinSize(wxSize(-1,100));
    
    flexGridSizer248413 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer248413->SetFlexibleDirection( wxBOTH );
    flexGridSizer248413->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer248413->AddGrowableCol(0);
    
    flexGridSizer24722->Add(flexGridSizer248413, 1, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    m_staticText2486121314 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 1 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText2486121314->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText2486121314, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam1 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam1->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam1, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861216 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 2 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861216->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861216, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam2 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam2->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam2, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861418 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 3 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861418->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861418, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam3 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam3->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam3, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861520 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 4 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861520->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861520, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam4 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam4->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam4, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText248622 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 5 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText248622->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText248622, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam5 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam5->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam5, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_panelManually = new wxPanel(m_mainNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelManuallyImgIndex;
    m_panelManuallyImgIndex = m_mainNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-dll")));
    m_mainNotebook->AddPage(m_panelManually, _("Manually Control"), false, m_panelManuallyImgIndex);
    
    flexGridSizer862 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer862->SetFlexibleDirection( wxBOTH );
    flexGridSizer862->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer862->AddGrowableCol(0);
    flexGridSizer862->AddGrowableCol(1);
    flexGridSizer862->AddGrowableRow(0);
    m_panelManually->SetSizer(flexGridSizer862);
    
    flexGridSizer418 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer418->SetFlexibleDirection( wxBOTH );
    flexGridSizer418->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer418->AddGrowableCol(0);
    
    flexGridSizer862->Add(flexGridSizer418, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer1169 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1169->SetFlexibleDirection( wxBOTH );
    flexGridSizer1169->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1169->AddGrowableCol(0);
    
    flexGridSizer418->Add(flexGridSizer1169, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer2081 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2081->SetFlexibleDirection( wxBOTH );
    flexGridSizer2081->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1169->Add(flexGridSizer2081, 0, wxALL, WXC_FROM_DIP(2));
    
    m_checkManuallyXY = new wxCheckBox(m_panelManually, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    m_checkManuallyXY->SetValue(true);
    
    flexGridSizer2081->Add(m_checkManuallyXY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1160 = new wxStaticText(m_panelManually, wxID_ANY, _("Manually moving Coordinates:"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    wxFont m_staticText1160Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText1160->SetFont(m_staticText1160Font);
    
    flexGridSizer2081->Add(m_staticText1160, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine1162 = new wxStaticLine(m_panelManually, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine1162, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer1522 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1522->SetFlexibleDirection( wxBOTH );
    flexGridSizer1522->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1522->AddGrowableCol(1);
    
    flexGridSizer1169->Add(flexGridSizer1522, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_mmRadioCoordinatesArr;
    m_mmRadioCoordinatesArr.Add(_("Absolute"));
    m_mmRadioCoordinatesArr.Add(_("Relative"));
    m_mmRadioCoordinates = new wxRadioBox(m_panelManually, wxID_ANY, _("Coordinates"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), m_mmRadioCoordinatesArr, 1, wxRA_SPECIFY_ROWS);
    m_mmRadioCoordinates->SetSelection(1);
    
    flexGridSizer1522->Add(m_mmRadioCoordinates, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer1523 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer1523->SetFlexibleDirection( wxBOTH );
    flexGridSizer1523->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1522->Add(flexGridSizer1523, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticText799 = new wxStaticText(m_panelManually, wxID_ANY, _("Z Axis during move :"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer1523->Add(m_staticText799, 0, wxALL, WXC_FROM_DIP(8));
    
    wxArrayString m_metricZArr;
    m_metricZArr.Add(wxT("Up"));
    m_metricZArr.Add(wxT("Down"));
    m_metricZ = new wxComboBox(m_panelManually, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), m_metricZArr, wxCB_READONLY);
    m_metricZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_metricZ->SetSelection(1);
    
    flexGridSizer1523->Add(m_metricZ, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    flexGridSizer1523->Add(42, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer1590 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1590->SetFlexibleDirection( wxBOTH );
    flexGridSizer1590->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1590->AddGrowableCol(0);
    flexGridSizer1590->AddGrowableRow(0);
    flexGridSizer1590->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1590, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer7893 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7893->SetFlexibleDirection( wxBOTH );
    flexGridSizer7893->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7893->AddGrowableCol(2);
    flexGridSizer7893->AddGrowableRow(1);
    
    flexGridSizer1590->Add(flexGridSizer7893, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText793 = new wxStaticText(m_panelManually, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer7893->Add(m_staticText793, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyXSlider = new wxButton(m_panelManually, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_minManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyXSlider->SetFont(m_minManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_minManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_metricX = new wxTextCtrl(m_panelManually, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxTE_RIGHT);
    m_metricX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricX->SetHint(wxT(""));
    #endif
    
    flexGridSizer7893->Add(m_metricX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyXSlider = new wxButton(m_panelManually, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_maxManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyXSlider->SetFont(m_maxManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_maxManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyXSlider = new wxButton(m_panelManually, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(26,26)), 0);
    m_zeroManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyXSlider->SetFont(m_zeroManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_zeroManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_zeroManuallyXSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyXSlider = new wxButton(m_panelManually, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_signManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyXSlider->SetFont(m_signManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_signManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_signManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitX = new wxStaticText(m_panelManually, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer7893->Add(m_mmUnitX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_xManuallySlider = new wxSlider(m_panelManually, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1590->Add(m_xManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer1591 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1591->SetFlexibleDirection( wxBOTH );
    flexGridSizer1591->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1591->AddGrowableCol(0);
    flexGridSizer1591->AddGrowableRow(0);
    flexGridSizer1591->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1591, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer7894 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7894->SetFlexibleDirection( wxBOTH );
    flexGridSizer7894->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7894->AddGrowableCol(2);
    flexGridSizer7894->AddGrowableRow(1);
    
    flexGridSizer1591->Add(flexGridSizer7894, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText797 = new wxStaticText(m_panelManually, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer7894->Add(m_staticText797, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyYSlider = new wxButton(m_panelManually, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_minManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyYSlider->SetFont(m_minManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_minManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_metricY = new wxTextCtrl(m_panelManually, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(120,-1)), wxTE_RIGHT);
    m_metricY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricY->SetHint(wxT(""));
    #endif
    
    flexGridSizer7894->Add(m_metricY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyYSlider = new wxButton(m_panelManually, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_maxManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyYSlider->SetFont(m_maxManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_maxManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyYSlider = new wxButton(m_panelManually, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(26,26)), 0);
    m_zeroManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyYSlider->SetFont(m_zeroManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_zeroManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyYSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyYSlider = new wxButton(m_panelManually, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_signManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyYSlider->SetFont(m_signManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_signManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitY = new wxStaticText(m_panelManually, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer7894->Add(m_mmUnitY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_yManuallySlider = new wxSlider(m_panelManually, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1591->Add(m_yManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText2073 = new wxStaticText(m_panelManually, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,50)), 0);
    
    flexGridSizer1591->Add(m_staticText2073, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2073->SetMinSize(wxSize(-1,50));
    
    m_staticLine2047 = new wxStaticLine(m_panelManually, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine2047, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2078 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2078->SetFlexibleDirection( wxBOTH );
    flexGridSizer2078->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1169->Add(flexGridSizer2078, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkManuallyZ = new wxCheckBox(m_panelManually, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    m_checkManuallyZ->SetValue(false);
    
    flexGridSizer2078->Add(m_checkManuallyZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2075 = new wxStaticText(m_panelManually, wxID_ANY, _("Manually Z Axis Moving:"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    wxFont m_staticText2075Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText2075->SetFont(m_staticText2075Font);
    
    flexGridSizer2078->Add(m_staticText2075, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer15911 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer15911->SetFlexibleDirection( wxBOTH );
    flexGridSizer15911->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer15911->AddGrowableCol(0);
    flexGridSizer15911->AddGrowableRow(0);
    flexGridSizer15911->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer15911, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer78942 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer78942->SetFlexibleDirection( wxBOTH );
    flexGridSizer78942->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer78942->AddGrowableCol(2);
    flexGridSizer78942->AddGrowableRow(1);
    
    flexGridSizer15911->Add(flexGridSizer78942, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText7973 = new wxStaticText(m_panelManually, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer78942->Add(m_staticText7973, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyZSlider = new wxButton(m_panelManually, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_minManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyZSlider->SetFont(m_minManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_minManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_metricZEdit = new wxTextCtrl(m_panelManually, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(120,-1)), wxTE_RIGHT);
    m_metricZEdit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricZEdit->SetHint(wxT(""));
    #endif
    
    flexGridSizer78942->Add(m_metricZEdit, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyZSlider = new wxButton(m_panelManually, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_maxManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyZSlider->SetFont(m_maxManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_maxManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyZSlider = new wxButton(m_panelManually, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(26,26)), 0);
    m_zeroManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyZSlider->SetFont(m_zeroManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_zeroManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyZSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyZSlider = new wxButton(m_panelManually, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(30,26)), 0);
    m_signManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyZSlider->SetFont(m_signManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_signManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitZ = new wxStaticText(m_panelManually, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), 0);
    
    flexGridSizer78942->Add(m_mmUnitZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_zManuallySlider = new wxSlider(m_panelManually, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_panelManually, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer15911->Add(m_zManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelTemplateContent = new wxPanel(m_mainNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTemplateContentImgIndex;
    m_panelTemplateContentImgIndex = m_mainNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-enumerator")));
    m_mainNotebook->AddPage(m_panelTemplateContent, _("Template Control"), false, m_panelTemplateContentImgIndex);
    
    flexGridSizer706 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer706->SetFlexibleDirection( wxBOTH );
    flexGridSizer706->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer706->AddGrowableCol(1);
    flexGridSizer706->AddGrowableRow(0);
    m_panelTemplateContent->SetSizer(flexGridSizer706);
    
    flexGridSizer1368 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1368->SetFlexibleDirection( wxBOTH );
    flexGridSizer1368->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1368->SetMinSize(28,-1);
    
    flexGridSizer706->Add(flexGridSizer1368, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_openSourceExtern = new wxButton(m_panelTemplateContent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSourceExtern->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_openSourceExtern->SetBitmapMargins(2,2);
    #endif
    m_openSourceExtern->SetToolTip(_("Open Source extern as Text"));
    
    flexGridSizer1368->Add(m_openSourceExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSourceExtern->SetMinSize(wxSize(24,24));
    
    m_openSvgExtern = new wxButton(m_panelTemplateContent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSvgExtern->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")), wxLEFT);
    m_openSvgExtern->SetBitmapMargins(2,2);
    #endif
    m_openSvgExtern->SetToolTip(_("Open Source extern with corresbonding tool"));
    
    flexGridSizer1368->Add(m_openSvgExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSvgExtern->SetMinSize(wxSize(24,24));
    
    m_saveTemplate = new wxButton(m_panelTemplateContent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_saveTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_saveTemplate->SetBitmapMargins(2,2);
    #endif
    m_saveTemplate->SetToolTip(_("Save Source"));
    
    flexGridSizer1368->Add(m_saveTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_saveTemplate->SetMinSize(wxSize(24,24));
    
    m_reloadTemplate = new wxButton(m_panelTemplateContent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_reloadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_reload")), wxLEFT);
    m_reloadTemplate->SetBitmapMargins(2,2);
    #endif
    m_reloadTemplate->SetToolTip(_("Reload Source"));
    
    flexGridSizer1368->Add(m_reloadTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_reloadTemplate->SetMinSize(wxSize(24,24));
    
    m_btSvgToggleWordWrap = new wxBitmapToggleButton(m_panelTemplateContent, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    m_btSvgToggleWordWrap->SetToolTip(_("Toggle Word Wrap Mode"));
    m_btSvgToggleWordWrap->SetValue(true);
    
    flexGridSizer1368->Add(m_btSvgToggleWordWrap, 0, wxALL, WXC_FROM_DIP(1));
    m_btSvgToggleWordWrap->SetMinSize(wxSize(24,24));
    
    m_previewErrorInfo = new wxBitmapToggleButton(m_panelTemplateContent, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-error")), wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(24,24)), 0);
    m_previewErrorInfo->SetToolTip(_("Preview with error information"));
    m_previewErrorInfo->SetValue(true);
    
    flexGridSizer1368->Add(m_previewErrorInfo, 0, wxALL, WXC_FROM_DIP(1));
    m_previewErrorInfo->SetMinSize(wxSize(24,24));
    flexGridSizer1368->SetMinSize(wxSize(28,-1));
    
    m_templateNotebook = new wxNotebook(m_panelTemplateContent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTemplateContent, wxSize(-1,-1)), wxNB_NOPAGETHEME|wxBK_BOTTOM|wxBK_DEFAULT);
    m_templateNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_templateNotebook->SetName(wxT("m_templateNotebook"));
    wxImageList* m_templateNotebook_il = new wxImageList(16, 16);
    m_templateNotebook->AssignImageList(m_templateNotebook_il);
    
    flexGridSizer706->Add(m_templateNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelTplEdit = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplEditImgIndex;
    m_panelTplEditImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("rectangle_blue")));
    m_templateNotebook->AddPage(m_panelTplEdit, _("Source"), false, m_panelTplEditImgIndex);
    
    flexGridSizer1294 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1294->SetFlexibleDirection( wxBOTH );
    flexGridSizer1294->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1294->AddGrowableCol(0);
    flexGridSizer1294->AddGrowableRow(0);
    m_panelTplEdit->SetSizer(flexGridSizer1294);
    
    m_stcFileContent = new wxStyledTextCtrl(m_panelTplEdit, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    // Configure the fold margin
    m_stcFileContent->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcFileContent->SetMarginSensitive(4, true);
    m_stcFileContent->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcFileContent->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcFileContent->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcFileContent->SetMarginWidth(2, 0);
    m_stcFileContent->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcFileContent_PixelWidth = 4 + 5 *m_stcFileContent->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcFileContent->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcFileContent->SetMarginWidth(0,m_stcFileContent_PixelWidth);
    
    // Configure the line symbol margin
    m_stcFileContent->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcFileContent->SetMarginMask(3, 0);
    m_stcFileContent->SetMarginWidth(3,1);
    // Select the lexer
    m_stcFileContent->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcFileContent->StyleClearAll();
    m_stcFileContent->SetWrapMode(0);
    m_stcFileContent->SetIndentationGuides(0);
    m_stcFileContent->SetKeyWords(0, wxT(""));
    m_stcFileContent->SetKeyWords(1, wxT(""));
    m_stcFileContent->SetKeyWords(2, wxT(""));
    m_stcFileContent->SetKeyWords(3, wxT(""));
    m_stcFileContent->SetKeyWords(4, wxT(""));
    
    flexGridSizer1294->Add(m_stcFileContent, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer1809 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer1809->SetFlexibleDirection( wxBOTH );
    flexGridSizer1809->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1809->AddGrowableCol(5);
    
    flexGridSizer1294->Add(flexGridSizer1809, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_tbCaseSensitive = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-case-sensitive")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbCaseSensitive->SetToolTip(_("Match case"));
    m_tbCaseSensitive->SetValue(false);
    
    flexGridSizer1809->Add(m_tbCaseSensitive, 0, wxALL, WXC_FROM_DIP(1));
    m_tbCaseSensitive->SetMinSize(wxSize(26,26));
    
    m_tbWholeWord = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-whole-word")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbWholeWord->SetToolTip(_("Match whole word"));
    m_tbWholeWord->SetValue(false);
    
    flexGridSizer1809->Add(m_tbWholeWord, 0, wxALL, WXC_FROM_DIP(1));
    m_tbWholeWord->SetMinSize(wxSize(26,26));
    
    m_tbRegEx = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-regular-expression")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbRegEx->SetToolTip(_("Match regular expresion"));
    m_tbRegEx->SetValue(false);
    
    flexGridSizer1809->Add(m_tbRegEx, 0, wxALL, WXC_FROM_DIP(1));
    m_tbRegEx->SetMinSize(wxSize(26,26));
    
    m_tbHighLight = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbHighLight->SetToolTip(_("Highlight all occurences"));
    m_tbHighLight->Enable(false);
    m_tbHighLight->SetValue(false);
    
    flexGridSizer1809->Add(m_tbHighLight, 0, wxALL, WXC_FROM_DIP(1));
    m_tbHighLight->SetMinSize(wxSize(26,26));
    
    m_svgEditSearchState = new wxStaticBitmap(m_panelTplEdit, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(20,-1)), 0 );
    
    flexGridSizer1809->Add(m_svgEditSearchState, 0, wxALL, WXC_FROM_DIP(5));
    m_svgEditSearchState->SetMinSize(wxSize(20,-1));
    
    wxArrayString m_svgEditSearchArr;
    m_svgEditSearch = new wxComboBox(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), m_svgEditSearchArr, 0);
    m_svgEditSearch->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_svgEditSearch->SetToolTip(_("Search pattern"));
    #if wxVERSION_NUMBER >= 3000
    m_svgEditSearch->SetHint(wxT(""));
    #endif
    
    flexGridSizer1809->Add(m_svgEditSearch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgEditFind = new wxButton(m_panelTplEdit, wxID_ANY, _("Find"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), 0);
    
    flexGridSizer1809->Add(m_svgEditFind, 0, wxALL, WXC_FROM_DIP(1));
    
    m_svgEditFindPrev = new wxButton(m_panelTplEdit, wxID_ANY, _("Find Prev"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), 0);
    
    flexGridSizer1809->Add(m_svgEditFindPrev, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer713 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer713->SetFlexibleDirection( wxBOTH );
    flexGridSizer713->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer713->AddGrowableCol(1);
    
    flexGridSizer1294->Add(flexGridSizer713, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_filePosition = new wxStaticText(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(100,-1)), 0);
    m_filePosition->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    flexGridSizer713->Add(m_filePosition, 0, wxALL, WXC_FROM_DIP(1));
    m_filePosition->SetMinSize(wxSize(100,-1));
    
    m_svgEditStatus = new wxTextCtrl(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_svgEditStatus->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_svgEditStatus->SetHint(wxT(""));
    #endif
    
    flexGridSizer713->Add(m_svgEditStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_editMode = new wxStaticText(m_panelTplEdit, wxID_ANY, _("edit mode"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), 0);
    m_editMode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    flexGridSizer713->Add(m_editMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_panelTplUserAgent = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplUserAgentImgIndex;
    m_panelTplUserAgentImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("rectangle_blue")));
    m_templateNotebook->AddPage(m_panelTplUserAgent, _("UserAgent"), false, m_panelTplUserAgentImgIndex);
    
    flexGridSizer1506 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1506->SetFlexibleDirection( wxBOTH );
    flexGridSizer1506->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1506->AddGrowableCol(0);
    flexGridSizer1506->AddGrowableRow(0);
    m_panelTplUserAgent->SetSizer(flexGridSizer1506);
    
    flexGridSizer1488 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer1488->SetFlexibleDirection( wxBOTH );
    flexGridSizer1488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1488->AddGrowableCol(0);
    flexGridSizer1488->AddGrowableCol(1);
    flexGridSizer1488->AddGrowableCol(2);
    flexGridSizer1488->AddGrowableRow(0);
    flexGridSizer1488->AddGrowableRow(1);
    
    flexGridSizer1506->Add(flexGridSizer1488, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer1490 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1490->SetFlexibleDirection( wxBOTH );
    flexGridSizer1490->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1490->AddGrowableCol(0);
    flexGridSizer1490->AddGrowableRow(1);
    flexGridSizer1490->AddGrowableRow(3);
    
    flexGridSizer1488->Add(flexGridSizer1490, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1498 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Inbound Path List:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1498Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1498Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1498->SetFont(m_staticText1498Font);
    
    flexGridSizer1490->Add(m_staticText1498, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAInboundPathList->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAInboundPathList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Ln"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAInboundPathList->AppendToggleColumn(_("Run"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Node"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_staticText14983 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Use Directives:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText14983Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText14983Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText14983->SetFont(m_staticText14983Font);
    
    flexGridSizer1490->Add(m_staticText14983, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAUseDirective->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAUseDirective, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    flexGridSizer1492 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1492->SetFlexibleDirection( wxBOTH );
    flexGridSizer1492->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1492->AddGrowableCol(0);
    flexGridSizer1492->AddGrowableRow(1);
    
    flexGridSizer1488->Add(flexGridSizer1492, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1500 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Detail Info:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1500Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1500Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1500->SetFont(m_staticText1500Font);
    
    flexGridSizer1492->Add(m_staticText1500, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUADetailInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1492->Add(m_dvListCtrlSvgUADetailInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_selectedUAInfo = new wxTextCtrl(m_panelTplUserAgent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxTE_READONLY);
    m_selectedUAInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    #if wxVERSION_NUMBER >= 3000
    m_selectedUAInfo->SetHint(wxT(""));
    #endif
    
    flexGridSizer1506->Add(m_selectedUAInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_panelTplDebugger = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplDebuggerImgIndex;
    m_panelTplDebuggerImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("rectangle_blue")));
    m_templateNotebook->AddPage(m_panelTplDebugger, _("Debugger"), false, m_panelTplDebuggerImgIndex);
    
    flexGridSizer1338 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer1338->SetFlexibleDirection( wxBOTH );
    flexGridSizer1338->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1338->AddGrowableCol(0);
    flexGridSizer1338->AddGrowableRow(1);
    flexGridSizer1338->AddGrowableRow(2);
    m_panelTplDebugger->SetSizer(flexGridSizer1338);
    
    flexGridSizer1565 = new wxFlexGridSizer(0, 4, 0, 0);
    flexGridSizer1565->SetFlexibleDirection( wxBOTH );
    flexGridSizer1565->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1565->AddGrowableCol(3);
    
    flexGridSizer1338->Add(flexGridSizer1565, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1370 = new wxStaticText(m_panelTplDebugger, wxID_ANY, _(" SVG Note Information:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), 0);
    wxFont m_staticText1370Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1370Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1370->SetFont(m_staticText1370Font);
    
    flexGridSizer1565->Add(m_staticText1370, 0, wxALL, WXC_FROM_DIP(2));
    
    flexGridSizer1565->Add(50, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1571 = new wxStaticText(m_panelTplDebugger, wxID_ANY, _("Current debug phase:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), 0);
    
    flexGridSizer1565->Add(m_staticText1571, 0, wxALL, WXC_FROM_DIP(2));
    
    m_debugPhase = new wxStaticText(m_panelTplDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), 0);
    m_debugPhase->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1565->Add(m_debugPhase, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgDebuggerInfoBase = new wxDataViewListCtrl(m_panelTplDebugger, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE|wxVSCROLL);
    m_dvListCtrlSvgDebuggerInfoBase->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_dvListCtrlSvgDebuggerInfoBase->SetToolTip(_("SVG Path Base Info"));
    
    flexGridSizer1338->Add(m_dvListCtrlSvgDebuggerInfoBase, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgDebuggerInfoBase->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(100), wxALIGN_LEFT);
    m_dvListCtrlSvgDebuggerInfoBase->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    flexGridSizer1362 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer1362->SetFlexibleDirection( wxBOTH );
    flexGridSizer1362->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1362->AddGrowableCol(0);
    flexGridSizer1362->AddGrowableCol(1);
    flexGridSizer1362->AddGrowableRow(1);
    
    flexGridSizer1338->Add(flexGridSizer1362, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1372 = new wxStaticText(m_panelTplDebugger, wxID_ANY, _(" SVG Path Information:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), 0);
    wxFont m_staticText1372Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1372Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1372->SetFont(m_staticText1372Font);
    
    flexGridSizer1362->Add(m_staticText1372, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText1374 = new wxStaticText(m_panelTplDebugger, wxID_ANY, _(" Detail Information:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), 0);
    wxFont m_staticText1374Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1374Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1374->SetFont(m_staticText1374Font);
    
    flexGridSizer1362->Add(m_staticText1374, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgDebuggerInfoPath = new wxDataViewListCtrl(m_panelTplDebugger, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE|wxVSCROLL);
    m_dvListCtrlSvgDebuggerInfoPath->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_dvListCtrlSvgDebuggerInfoPath->SetToolTip(_("SVG Path Path Info"));
    
    flexGridSizer1362->Add(m_dvListCtrlSvgDebuggerInfoPath, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgDebuggerInfoPath->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(100), wxALIGN_LEFT);
    m_dvListCtrlSvgDebuggerInfoPath->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgDebuggerInfoDetail = new wxDataViewListCtrl(m_panelTplDebugger, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgDebuggerInfoDetail->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_dvListCtrlSvgDebuggerInfoDetail->SetToolTip(_("SVG Path Processing Details"));
    
    flexGridSizer1362->Add(m_dvListCtrlSvgDebuggerInfoDetail, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgDebuggerInfoDetail->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(100), wxALIGN_LEFT);
    m_dvListCtrlSvgDebuggerInfoDetail->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    flexGridSizer1354 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1354->SetFlexibleDirection( wxBOTH );
    flexGridSizer1354->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1354->AddGrowableCol(1);
    flexGridSizer1354->AddGrowableRow(0);
    
    flexGridSizer1338->Add(flexGridSizer1354, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgDebuggerKey = new wxTextCtrl(m_panelTplDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), wxTE_READONLY);
    m_svgDebuggerKey->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_svgDebuggerKey->SetToolTip(_("Key"));
    #if wxVERSION_NUMBER >= 3000
    m_svgDebuggerKey->SetHint(wxT(""));
    #endif
    
    flexGridSizer1354->Add(m_svgDebuggerKey, 0, wxALL, WXC_FROM_DIP(1));
    
    m_svgDebuggerValue = new wxTextCtrl(m_panelTplDebugger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplDebugger, wxSize(-1,-1)), wxTE_READONLY);
    m_svgDebuggerValue->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_svgDebuggerValue->SetToolTip(_("Value"));
    #if wxVERSION_NUMBER >= 3000
    m_svgDebuggerValue->SetHint(wxT(""));
    #endif
    
    flexGridSizer1354->Add(m_svgDebuggerValue, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelTplPreview = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplPreviewImgIndex;
    m_panelTplPreviewImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("rectangle_blue")));
    m_templateNotebook->AddPage(m_panelTplPreview, _("Preview"), false, m_panelTplPreviewImgIndex);
    
    flexGridSizer692 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer692->SetFlexibleDirection( wxBOTH );
    flexGridSizer692->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer692->AddGrowableCol(0);
    flexGridSizer692->AddGrowableRow(1);
    m_panelTplPreview->SetSizer(flexGridSizer692);
    
    m_svgFilePreviewHint = new wxStaticText(m_panelTplPreview, wxID_ANY, _("CNC File Manger Preview . . ."), wxDefaultPosition, wxDLG_UNIT(m_panelTplPreview, wxSize(-1,-1)), wxALIGN_CENTRE);
    m_svgFilePreviewHint->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_svgFilePreviewHint->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    wxFont m_svgFilePreviewHintFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_svgFilePreviewHintFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_svgFilePreviewHint->SetFont(m_svgFilePreviewHintFont);
    
    flexGridSizer692->Add(m_svgFilePreviewHint, 0, wxALL|wxEXPAND|wxALIGN_CENTER|wxALIGN_LEFT, WXC_FROM_DIP(3));
    
    #if wxUSE_WEBVIEW
    m_svgPreview = wxWebView::New(m_panelTplPreview, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_panelTplPreview, wxSize(-1,-1)), wxWebViewBackendDefault, wxFULL_REPAINT_ON_RESIZE);
    
    flexGridSizer692->Add(m_svgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    #endif // wxUSE_WEBVIEW
    
    m_scrollWinFile = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL | wxVSCROLL);
    m_scrollWinFile->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_scrollWinFile, wxAuiPaneInfo().Caption(_("CNC Template Manager")).Direction(wxAUI_DOCK_BOTTOM).Layer(1).Row(0).Position(0).BestSize(100,160).MinSize(100,160).MaxSize(100,160).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    flexGridSizer1628 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1628->SetFlexibleDirection( wxBOTH );
    flexGridSizer1628->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1628->AddGrowableCol(0);
    flexGridSizer1628->AddGrowableRow(0);
    m_scrollWinFile->SetSizer(flexGridSizer1628);
    
    m_templateTreeBook = new wxTreebook(m_scrollWinFile, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinFile, wxSize(-1,-1)), wxBK_DEFAULT);
    m_templateTreeBook->SetName(wxT("m_templateTreeBook"));
    wxImageList* m_templateTreeBook_il = new wxImageList(16, 16);
    m_templateTreeBook->AssignImageList(m_templateTreeBook_il);
    
    flexGridSizer1628->Add(m_templateTreeBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_lruPanel = new wxPanel(m_templateTreeBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateTreeBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_lruPanelImgIndex;
    m_lruPanelImgIndex = m_templateTreeBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-history")));
    m_templateTreeBook->AddPage(m_lruPanel, _("LRU"), true, m_lruPanelImgIndex);
    
    flexGridSizer1642 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1642->SetFlexibleDirection( wxBOTH );
    flexGridSizer1642->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1642->AddGrowableCol(0);
    flexGridSizer1642->AddGrowableRow(1);
    m_lruPanel->SetSizer(flexGridSizer1642);
    
    m_staticText1644 = new wxStaticText(m_lruPanel, wxID_ANY, _("Last recently used Templates:"), wxDefaultPosition, wxDLG_UNIT(m_lruPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1644Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1644Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1644->SetFont(m_staticText1644Font);
    
    flexGridSizer1642->Add(m_staticText1644, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_lruListArr;
    m_lruList = new wxListBox(m_lruPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_lruPanel, wxSize(-1,-1)), m_lruListArr, wxLB_NEEDED_SB|wxLB_HSCROLL|wxLB_SINGLE|wxHSCROLL);
    wxFont m_lruListFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_lruList->SetFont(m_lruListFont);
    
    flexGridSizer1642->Add(m_lruList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_stdPanel = new wxPanel(m_templateTreeBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateTreeBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_stdPanelImgIndex;
    m_stdPanelImgIndex = m_templateTreeBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-cxx-workspace")));
    m_templateTreeBook->AddPage(m_stdPanel, _("STD"), false, m_stdPanelImgIndex);
    
    flexGridSizer2599 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2599->SetFlexibleDirection( wxBOTH );
    flexGridSizer2599->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2599->AddGrowableCol(1);
    flexGridSizer2599->AddGrowableRow(0);
    m_stdPanel->SetSizer(flexGridSizer2599);
    
    flexGridSizer1636 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1636->SetFlexibleDirection( wxBOTH );
    flexGridSizer1636->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2599->Add(flexGridSizer1636, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btDefaultDir = new wxButton(m_stdPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_stdPanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btDefaultDir->SetBitmap(wxArtProvider::GetBitmap(wxART_UNDO, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_btDefaultDir->SetBitmapMargins(2,2);
    #endif
    m_btDefaultDir->SetToolTip(_("Select default directory"));
    
    flexGridSizer1636->Add(m_btDefaultDir, 0, wxALL, WXC_FROM_DIP(2));
    m_btDefaultDir->SetMinSize(wxSize(24,24));
    
    m_btCurrentFile = new wxButton(m_stdPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_stdPanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCurrentFile->SetBitmap(wxArtProvider::GetBitmap(wxART_REDO, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_btCurrentFile->SetBitmapMargins(2,2);
    #endif
    m_btCurrentFile->SetToolTip(_("Select current file"));
    
    flexGridSizer1636->Add(m_btCurrentFile, 0, wxALL, WXC_FROM_DIP(2));
    m_btCurrentFile->SetMinSize(wxSize(24,24));
    
    flexGridSizer1645 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1645->SetFlexibleDirection( wxBOTH );
    flexGridSizer1645->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1645->AddGrowableCol(0);
    flexGridSizer1645->AddGrowableRow(1);
    
    flexGridSizer2599->Add(flexGridSizer1645, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1647 = new wxStaticText(m_stdPanel, wxID_ANY, _("Standrad Directory:"), wxDefaultPosition, wxDLG_UNIT(m_stdPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1647Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1647Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1647->SetFont(m_staticText1647Font);
    
    flexGridSizer1645->Add(m_staticText1647, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dirCtrl = new wxGenericDirCtrl(m_stdPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_stdPanel, wxSize(-1,-1)), wxDIRCTRL_SHOW_FILTERS|wxDIRCTRL_SELECT_FIRST|wxFULL_REPAINT_ON_RESIZE);
    wxFont m_dirCtrlFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Verdana"));
    m_dirCtrl->SetFont(m_dirCtrlFont);
    m_dirCtrl->ShowHidden(false);
    
    flexGridSizer1645->Add(m_dirCtrl, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    m_scrollWinLogger = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL | wxVSCROLL);
    m_scrollWinLogger->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_scrollWinLogger, wxAuiPaneInfo().Caption(_("CNC Logger")).Direction(wxAUI_DOCK_BOTTOM).Layer(1).Row(0).Position(0).BestSize(100,160).MinSize(100,160).MaxSize(100,180).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    flexGridSizer869 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer869->SetFlexibleDirection( wxBOTH );
    flexGridSizer869->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer869->AddGrowableCol(1);
    flexGridSizer869->AddGrowableRow(0);
    m_scrollWinLogger->SetSizer(flexGridSizer869);
    
    flexGridSizer1863 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1863->SetFlexibleDirection( wxBOTH );
    flexGridSizer1863->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer869->Add(flexGridSizer1863, 0, wxALL, WXC_FROM_DIP(0));
    
    m_clearLogger = new wxBitmapButton(m_scrollWinLogger, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_clearLogger->SetToolTip(_("Clear Logger Panel"));
    
    flexGridSizer1863->Add(m_clearLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    m_copyLogger = new wxBitmapButton(m_scrollWinLogger, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_copyLogger->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_copyLogger->SetToolTip(_("Copy Logger Panel"));
    
    flexGridSizer1863->Add(m_copyLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer2520 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2520->SetFlexibleDirection( wxBOTH );
    flexGridSizer2520->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2520->AddGrowableCol(0);
    flexGridSizer2520->AddGrowableRow(0);
    
    flexGridSizer869->Add(flexGridSizer2520, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_logger = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_logger->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BACKGROUND));
    m_logger->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_loggerFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_logger->SetFont(m_loggerFont);
    m_logger->SetToolTip(_("Logger Output"));
    
    flexGridSizer2520->Add(m_logger, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_tmpTraceInfo = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,24)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    m_tmpTraceInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tmpTraceInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_tmpTraceInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_tmpTraceInfo->SetFont(m_tmpTraceInfoFont);
    m_tmpTraceInfo->SetToolTip(_("Trace Information"));
    
    flexGridSizer2520->Add(m_tmpTraceInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_tmpTraceInfo->SetMinSize(wxSize(-1,24));
    
    flexGridSizer1106 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer1106->SetFlexibleDirection( wxBOTH );
    flexGridSizer1106->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer869->Add(flexGridSizer1106, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText1136 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("Current Values:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1136Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1136->SetFont(m_staticText1136Font);
    
    flexGridSizer1106->Add(m_staticText1136, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticLine1138 = new wxStaticLine(m_scrollWinLogger, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1106->Add(m_staticLine1138, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer1132 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer1132->SetFlexibleDirection( wxBOTH );
    flexGridSizer1132->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1132->AddGrowableCol(1);
    flexGridSizer1132->AddGrowableCol(3);
    
    flexGridSizer1106->Add(flexGridSizer1132, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1128 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("Crossing:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1128Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1128->SetFont(m_staticText1128Font);
    
    flexGridSizer1132->Add(m_staticText1128, 0, wxALL, WXC_FROM_DIP(5));
    
    m_passingCount = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(25,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_passingCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_passingCountFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_passingCount->SetFont(m_passingCountFont);
    m_passingCount->SetToolTip(_("Crossings"));
    #if wxVERSION_NUMBER >= 3000
    m_passingCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer1132->Add(m_passingCount, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    m_passingCount->SetMinSize(wxSize(25,18));
    
    m_staticText1966 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("from"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1966Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1966->SetFont(m_staticText1966Font);
    
    flexGridSizer1132->Add(m_staticText1966, 0, wxALL, WXC_FROM_DIP(5));
    
    m_crossings = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(25,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_crossings->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_crossingsFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_crossings->SetFont(m_crossingsFont);
    #if wxVERSION_NUMBER >= 3000
    m_crossings->SetHint(wxT(""));
    #endif
    
    flexGridSizer1132->Add(m_crossings, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_crossings->SetMinSize(wxSize(25,18));
    
    flexGridSizer1134 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer1134->SetFlexibleDirection( wxBOTH );
    flexGridSizer1134->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1134->AddGrowableCol(1);
    
    flexGridSizer1106->Add(flexGridSizer1134, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1114 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("Speed X :"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1114Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1114->SetFont(m_staticText1114Font);
    
    flexGridSizer1134->Add(m_staticText1114, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedX = new wxSlider(m_scrollWinLogger, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxSL_HORIZONTAL|wxBORDER_SUNKEN);
    m_speedX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1134->Add(m_speedX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1116 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("Speed Y :"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1116Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1116->SetFont(m_staticText1116Font);
    
    flexGridSizer1134->Add(m_staticText1116, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedY = new wxSlider(m_scrollWinLogger, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxSL_HORIZONTAL|wxBORDER_SUNKEN);
    m_speedY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1134->Add(m_speedY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1118 = new wxStaticText(m_scrollWinLogger, wxID_ANY, _("Speed Z :"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    wxFont m_staticText1118Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1118->SetFont(m_staticText1118Font);
    
    flexGridSizer1134->Add(m_staticText1118, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedZ = new wxSlider(m_scrollWinLogger, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxSL_HORIZONTAL|wxBORDER_SUNKEN);
    m_speedZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1134->Add(m_speedZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_statusBar = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,15)), wxBORDER_NONE);
    m_statusBar->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_statusBar->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_statusBar, wxAuiPaneInfo().Direction(wxAUI_DOCK_BOTTOM).Layer(2).Row(0).Position(0).CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    flexGridSizer436 = new wxFlexGridSizer(1, 36, 0, 0);
    flexGridSizer436->SetFlexibleDirection( wxBOTH );
    flexGridSizer436->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer436->AddGrowableRow(1);
    m_statusBar->SetSizer(flexGridSizer436);
    
    m_staticText3952 = new wxStaticText(m_statusBar, wxID_ANY, _("Cmd Count:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    m_staticText3952->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer436->Add(m_staticText3952, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText3952->SetMinSize(wxSize(-1,18));
    
    m_cmdCount = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(60,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_cmdCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_cmdCount->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_cmdCount->SetToolTip(_("Controller Command Count"));
    #if wxVERSION_NUMBER >= 3000
    m_cmdCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_cmdCount, 0, wxALL, WXC_FROM_DIP(3));
    m_cmdCount->SetMinSize(wxSize(60,18));
    
    m_staticText395 = new wxStaticText(m_statusBar, wxID_ANY, _("Time consumed [ms]:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    m_staticText395->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer436->Add(m_staticText395, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText395->SetMinSize(wxSize(-1,18));
    
    m_cmdDuration = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(60,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_cmdDuration->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_cmdDuration->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_cmdDuration->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_cmdDuration, 0, wxALL, WXC_FROM_DIP(3));
    m_cmdDuration->SetMinSize(wxSize(60,18));
    
    m_staticLine602 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_inputFileName = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("<Template Name>"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(150,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_inputFileName->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_inputFileName->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    #if wxVERSION_NUMBER >= 3000
    m_inputFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_inputFileName, 0, wxALL, WXC_FROM_DIP(3));
    
    m_staticLine6801 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6801, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgParseMode = new wxStaticText(m_statusBar, wxID_ANY, _("pM"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,-1)), wxALIGN_CENTRE);
    m_svgParseMode->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_svgParseMode->SetToolTip(_("SVG Parse Mode"));
    
    flexGridSizer436->Add(m_svgParseMode, 0, wxALL, WXC_FROM_DIP(3));
    m_svgParseMode->SetMinSize(wxSize(50,-1));
    
    m_activityPanel = new wxPanel(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(80,16)), wxTAB_TRAVERSAL);
    m_activityPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_activityPanel->SetToolTip(_("Activity Control"));
    
    flexGridSizer436->Add(m_activityPanel, 0, wxALL, WXC_FROM_DIP(5));
    m_activityPanel->SetMinSize(wxSize(80,16));
    
    m_staticLine680 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine680, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    LableX = new wxStaticText(m_statusBar, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer436->Add(LableX, 0, wxALL, WXC_FROM_DIP(3));
    LableX->SetMinSize(wxSize(-1,18));
    
    m_xAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_xAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xAxis->SetToolTip(_("PC Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_xAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_xAxis->SetMinSize(wxSize(50,20));
    
    m_xAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_xAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_xAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_xAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_xAxisCtl->SetMinSize(wxSize(50,20));
    
    LabelY = new wxStaticText(m_statusBar, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LabelY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer436->Add(LabelY, 0, wxALL, WXC_FROM_DIP(3));
    LabelY->SetMinSize(wxSize(-1,18));
    
    m_yAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_yAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yAxis->SetToolTip(_("PC Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_yAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_yAxis->SetMinSize(wxSize(50,20));
    
    m_yAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_yAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_yAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_yAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_yAxisCtl->SetMinSize(wxSize(50,20));
    
    LableZ = new wxStaticText(m_statusBar, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer436->Add(LableZ, 0, wxALL, WXC_FROM_DIP(3));
    LableZ->SetMinSize(wxSize(-1,18));
    
    m_zAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_zAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    m_zAxis->SetToolTip(_("PC Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_zAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_zAxis->SetMinSize(wxSize(50,20));
    
    m_zAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_zAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_zAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer436->Add(m_zAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_zAxisCtl->SetMinSize(wxSize(50,20));
    
    m_staticLine60234 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine60234, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1196 = new wxStaticText(m_statusBar, wxID_ANY, _("End Switches:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText1196->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    
    flexGridSizer436->Add(m_staticText1196, 0, wxALL, WXC_FROM_DIP(3));
    
    m_xMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_xMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_xMinLimit->SetToolTip(_("X Min Limit"));
    
    flexGridSizer436->Add(m_xMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_xMinLimit->SetMinSize(wxSize(10,16));
    
    m_xMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_xMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_xMaxLimit->SetToolTip(_("X Max Limit"));
    
    flexGridSizer436->Add(m_xMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_xMaxLimit->SetMinSize(wxSize(10,16));
    
    m_yMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_yMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_yMinLimit->SetToolTip(_("Y Min Limit"));
    
    flexGridSizer436->Add(m_yMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_yMinLimit->SetMinSize(wxSize(10,16));
    
    m_yMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_yMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_yMaxLimit->SetToolTip(_("Y Max Limit"));
    
    flexGridSizer436->Add(m_yMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_yMaxLimit->SetMinSize(wxSize(10,16));
    
    m_zMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_zMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_zMinLimit->SetToolTip(_("Z Min Limit"));
    
    flexGridSizer436->Add(m_zMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_zMinLimit->SetMinSize(wxSize(10,16));
    
    m_zMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_zMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_zMaxLimit->SetToolTip(_("Z Max Limit"));
    
    flexGridSizer436->Add(m_zMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_zMaxLimit->SetMinSize(wxSize(10,16));
    
    m_staticLine602341 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText2199 = new wxStaticText(m_statusBar, wxID_ANY, _("Zero Pos:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText2199->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    
    flexGridSizer436->Add(m_staticText2199, 0, wxALL, WXC_FROM_DIP(3));
    
    m_refPosTrafficLight = new wxStaticBitmap(m_statusBar, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(30,-1)), 0 );
    
    flexGridSizer436->Add(m_refPosTrafficLight, 0, wxALL, WXC_FROM_DIP(0));
    m_refPosTrafficLight->SetMinSize(wxSize(30,-1));
    
    m_staticLine6023412 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6023412, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_scrollOutbound = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    m_scrollOutbound->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_scrollOutbound->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_scrollOutbound, wxAuiPaneInfo().Caption(_("CNC Monitor")).Direction(wxAUI_DOCK_CENTER).Layer(1).Row(0).Position(0).BestSize(800,800).MinSize(10,10).MaxSize(800,800).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    m_auimgrMain->Update();
    
    flexGridSizer649 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer649->SetFlexibleDirection( wxBOTH );
    flexGridSizer649->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer649->AddGrowableCol(0);
    flexGridSizer649->AddGrowableRow(0);
    m_scrollOutbound->SetSizer(flexGridSizer649);
    
    m_outboundNotebook = new wxNotebook(m_scrollOutbound, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollOutbound, wxSize(-1,-1)), wxBK_DEFAULT);
    m_outboundNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_outboundNotebook->SetName(wxT("m_outboundNotebook"));
    wxImageList* m_outboundNotebook_il = new wxImageList(16, 16);
    m_outboundNotebook->AssignImageList(m_outboundNotebook_il);
    
    flexGridSizer649->Add(m_outboundNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_cncParameters = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncParametersImgIndex;
    m_cncParametersImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-class")));
    m_outboundNotebook->AddPage(m_cncParameters, _("CNC Values"), false, m_cncParametersImgIndex);
    
    flexGridSizer1076 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1076->SetFlexibleDirection( wxBOTH );
    flexGridSizer1076->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1076->AddGrowableCol(0);
    flexGridSizer1076->AddGrowableRow(0);
    m_cncParameters->SetSizer(flexGridSizer1076);
    
    m_notebookConfig = new wxListbook(m_cncParameters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncParameters, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_notebookConfig->SetToolTip(_("qwewe"));
    m_notebookConfig->SetName(wxT("m_notebookConfig"));
    wxImageList* m_notebookConfig_il = new wxImageList(16, 16);
    m_notebookConfig->AssignImageList(m_notebookConfig_il);
    
    flexGridSizer1076->Add(m_notebookConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel2601 = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel2601ImgIndex;
    m_panel2601ImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-database")));
    m_notebookConfig->AddPage(m_panel2601, _("Summary"), true, m_panel2601ImgIndex);
    
    flexGridSizer2603 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer2603->SetFlexibleDirection( wxBOTH );
    flexGridSizer2603->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2603->AddGrowableCol(0);
    flexGridSizer2603->AddGrowableRow(2);
    m_panel2601->SetSizer(flexGridSizer2603);
    
    m_staticText11481 = new wxStaticText(m_panel2601, wxID_ANY, _("Configuration Summary"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    wxFont m_staticText11481Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText11481->SetFont(m_staticText11481Font);
    
    flexGridSizer2603->Add(m_staticText11481, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2603->Add(0, 8, 1, wxALL, WXC_FROM_DIP(0));
    
    m_dvListCtrlConfigSummary = new wxDataViewListCtrl(m_panel2601, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlConfigSummary->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2603->Add(m_dvListCtrlConfigSummary, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Parameter"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(200), wxALIGN_LEFT);
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(120), wxALIGN_RIGHT);
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Unit"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    flexGridSizer2609 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2609->SetFlexibleDirection( wxBOTH );
    flexGridSizer2609->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2609->AddGrowableCol(0);
    flexGridSizer2609->AddGrowableRow(0);
    
    flexGridSizer2603->Add(flexGridSizer2609, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btCancelRun = new wxButton(m_panel2601, wxID_ANY, _("Cancel Run"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancelRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-execute_stop")), wxLEFT);
    m_btCancelRun->SetBitmapMargins(2,2);
    #endif
    m_btCancelRun->Enable(false);
    
    flexGridSizer2609->Add(m_btCancelRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_btConfirmRun = new wxButton(m_panel2601, wxID_ANY, _("Confirm Run"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btConfirmRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-ok")), wxLEFT);
    m_btConfirmRun->SetBitmapMargins(2,2);
    #endif
    m_btConfirmRun->Enable(false);
    
    flexGridSizer2609->Add(m_btConfirmRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_cncSetters = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncSettersImgIndex;
    m_cncSettersImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_notebookConfig->AddPage(m_cncSetters, _("CNC Setter"), false, m_cncSettersImgIndex);
    
    flexGridSizer1142 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer1142->SetFlexibleDirection( wxBOTH );
    flexGridSizer1142->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1142->AddGrowableCol(0);
    flexGridSizer1142->AddGrowableCol(1);
    flexGridSizer1142->AddGrowableRow(1);
    m_cncSetters->SetSizer(flexGridSizer1142);
    
    m_staticText1148 = new wxStaticText(m_cncSetters, wxID_ANY, _("Current Setter Values:"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    wxFont m_staticText1148Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1148->SetFont(m_staticText1148Font);
    
    flexGridSizer1142->Add(m_staticText1148, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer1471 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1471->SetFlexibleDirection( wxBOTH );
    flexGridSizer1471->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1471->AddGrowableCol(1);
    
    flexGridSizer1142->Add(flexGridSizer1471, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1150 = new wxStaticText(m_cncSetters, wxID_ANY, _("Processed Setter Values (for debug purpose):"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    wxFont m_staticText1150Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1150->SetFont(m_staticText1150Font);
    
    flexGridSizer1471->Add(m_staticText1150, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button1473 = new wxButton(m_cncSetters, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button1473->SetBitmap(wxArtProvider::GetBitmap(wxART_MINUS, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_button1473->SetBitmapMargins(2,2);
    #endif
    m_button1473->SetToolTip(_("Clear processed setter list"));
    
    flexGridSizer1471->Add(m_button1473, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_button1473->SetMinSize(wxSize(24,24));
    
    m_dvListCtrlLastSetters = new wxDataViewListCtrl(m_cncSetters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlLastSetters->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1142->Add(m_dvListCtrlLastSetters, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlLastSetters->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlLastSetters->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlProcessedSetters = new wxDataViewListCtrl(m_cncSetters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlProcessedSetters->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1142->Add(m_dvListCtrlProcessedSetters, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlProcessedSetters->AppendTextColumn(_("#"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlProcessedSetters->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlProcessedSetters->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_cncConfiguration = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncConfigurationImgIndex;
    m_cncConfigurationImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-member_protected")));
    m_notebookConfig->AddPage(m_cncConfiguration, _("PC Config"), false, m_cncConfigurationImgIndex);
    
    flexGridSizer901 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer901->SetFlexibleDirection( wxBOTH );
    flexGridSizer901->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer901->AddGrowableCol(0);
    flexGridSizer901->AddGrowableCol(1);
    flexGridSizer901->AddGrowableRow(2);
    m_cncConfiguration->SetSizer(flexGridSizer901);
    
    m_staticText1283 = new wxStaticText(m_cncConfiguration, wxID_ANY, _("Static Config"), wxDefaultPosition, wxDLG_UNIT(m_cncConfiguration, wxSize(-1,-1)), 0);
    wxFont m_staticText1283Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1283->SetFont(m_staticText1283Font);
    
    flexGridSizer901->Add(m_staticText1283, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1281 = new wxStaticText(m_cncConfiguration, wxID_ANY, _("Dynamic Config"), wxDefaultPosition, wxDLG_UNIT(m_cncConfiguration, wxSize(-1,-1)), 0);
    wxFont m_staticText1281Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1281->SetFont(m_staticText1281Font);
    
    flexGridSizer901->Add(m_staticText1281, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer901->Add(0, 8, 1, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer901->Add(0, 8, 1, wxALL, WXC_FROM_DIP(0));
    
    m_dvListCtrlStatic = new wxDataViewListCtrl(m_cncConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncConfiguration, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlStatic->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer901->Add(m_dvListCtrlStatic, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlStatic->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlStatic->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlDynamic = new wxDataViewListCtrl(m_cncConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncConfiguration, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlDynamic->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer901->Add(m_dvListCtrlDynamic, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlDynamic->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlDynamic->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_controllerConfiguration = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_controllerConfigurationImgIndex;
    m_controllerConfigurationImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-member_public")));
    m_notebookConfig->AddPage(m_controllerConfiguration, _("Ctrl Config"), false, m_controllerConfigurationImgIndex);
    
    flexGridSizer1306 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1306->SetFlexibleDirection( wxBOTH );
    flexGridSizer1306->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1306->AddGrowableCol(0);
    flexGridSizer1306->AddGrowableRow(1);
    m_controllerConfiguration->SetSizer(flexGridSizer1306);
    
    flexGridSizer1311 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1311->SetFlexibleDirection( wxBOTH );
    flexGridSizer1311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1311->AddGrowableCol(0);
    
    flexGridSizer1306->Add(flexGridSizer1311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText12831 = new wxStaticText(m_controllerConfiguration, wxID_ANY, _("Requested Controller Config"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    wxFont m_staticText12831Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText12831->SetFont(m_staticText12831Font);
    
    flexGridSizer1311->Add(m_staticText12831, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlConfig = new wxButton(m_controllerConfiguration, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlConfig->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlConfig->SetBitmapMargins(2,2);
    #endif
    m_btRequestCtlConfig->SetToolTip(_("Request Controller Configuration"));
    
    flexGridSizer1311->Add(m_btRequestCtlConfig, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerConfig = new wxDataViewListCtrl(m_controllerConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerConfig->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1306->Add(m_dvListCtrlControllerConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlControllerConfig->AppendTextColumn(_("PID"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_controllerPinReport = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_controllerPinReport->SetToolTip(_("Request Controller Pin Report"));
    int m_controllerPinReportImgIndex;
    m_controllerPinReportImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-ToolPin")));
    m_notebookConfig->AddPage(m_controllerPinReport, _("Ctrl Pin Report"), false, m_controllerPinReportImgIndex);
    
    flexGridSizer13061 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer13061->SetFlexibleDirection( wxBOTH );
    flexGridSizer13061->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13061->AddGrowableCol(0);
    flexGridSizer13061->AddGrowableRow(1);
    m_controllerPinReport->SetSizer(flexGridSizer13061);
    
    flexGridSizer13112 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer13112->SetFlexibleDirection( wxBOTH );
    flexGridSizer13112->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13112->AddGrowableCol(0);
    
    flexGridSizer13061->Add(flexGridSizer13112, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText128313 = new wxStaticText(m_controllerPinReport, wxID_ANY, _("Conroller Pin Report"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    wxFont m_staticText128313Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText128313->SetFont(m_staticText128313Font);
    
    flexGridSizer13112->Add(m_staticText128313, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlPins = new wxButton(m_controllerPinReport, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlPins->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlPins->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer13112->Add(m_btRequestCtlPins, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerPins = new wxDataViewListCtrl(m_controllerPinReport, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerPins->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer13061->Add(m_dvListCtrlControllerPins, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlControllerPins->AppendTextColumn(_("PIN"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Description"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Type"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Mode"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_conrollerMessages = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_conrollerMessagesImgIndex;
    m_conrollerMessagesImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_notebookConfig->AddPage(m_conrollerMessages, _("Ctrl Messages"), false, m_conrollerMessagesImgIndex);
    
    flexGridSizer2577 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2577->SetFlexibleDirection( wxBOTH );
    flexGridSizer2577->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2577->AddGrowableCol(0);
    flexGridSizer2577->AddGrowableRow(1);
    m_conrollerMessages->SetSizer(flexGridSizer2577);
    
    flexGridSizer2586 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2586->SetFlexibleDirection( wxBOTH );
    flexGridSizer2586->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2586->AddGrowableCol(0);
    
    flexGridSizer2577->Add(flexGridSizer2586, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1283132 = new wxStaticText(m_conrollerMessages, wxID_ANY, _("Conroller Message History"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    wxFont m_staticText1283132Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1283132->SetFont(m_staticText1283132Font);
    
    flexGridSizer2586->Add(m_staticText1283132, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btClearMsgHistory = new wxButton(m_conrollerMessages, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearMsgHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearMsgHistory->SetBitmapMargins(2,2);
    #endif
    m_btClearMsgHistory->SetToolTip(_("Clear the Message Histroy"));
    
    flexGridSizer2586->Add(m_btClearMsgHistory, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_controllerMsgHistory = new wxTextCtrl(m_conrollerMessages, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    m_controllerMsgHistory->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_controllerMsgHistoryFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_controllerMsgHistory->SetFont(m_controllerMsgHistoryFont);
    
    flexGridSizer2577->Add(m_controllerMsgHistory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_controllerErrorInfo = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_controllerErrorInfoImgIndex;
    m_controllerErrorInfoImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-patch")));
    m_notebookConfig->AddPage(m_controllerErrorInfo, _("Ctrl Error Info"), false, m_controllerErrorInfoImgIndex);
    
    flexGridSizer13062 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer13062->SetFlexibleDirection( wxBOTH );
    flexGridSizer13062->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13062->AddGrowableCol(0);
    flexGridSizer13062->AddGrowableRow(1);
    m_controllerErrorInfo->SetSizer(flexGridSizer13062);
    
    flexGridSizer13113 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer13113->SetFlexibleDirection( wxBOTH );
    flexGridSizer13113->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13113->AddGrowableCol(0);
    
    flexGridSizer13062->Add(flexGridSizer13113, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText128314 = new wxStaticText(m_controllerErrorInfo, wxID_ANY, _("Requested Controller Error Info"), wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), 0);
    wxFont m_staticText128314Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText128314->SetFont(m_staticText128314Font);
    
    flexGridSizer13113->Add(m_staticText128314, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlErrorInfo = new wxButton(m_controllerErrorInfo, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlErrorInfo->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlErrorInfo->SetBitmapMargins(2,2);
    #endif
    m_btRequestCtlErrorInfo->SetToolTip(_("Request Controller Error Info"));
    
    flexGridSizer13113->Add(m_btRequestCtlErrorInfo, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerErrorInfo = new wxDataViewListCtrl(m_controllerErrorInfo, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerErrorInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer13062->Add(m_dvListCtrlControllerErrorInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("#"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Error Code"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Error Text"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Info"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_outPanel = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_outPanelImgIndex;
    m_outPanelImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-text_selection")));
    m_outboundNotebook->AddPage(m_outPanel, _("Motion Monitor"), false, m_outPanelImgIndex);
    
    flexGridSizer1042 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1042->SetFlexibleDirection( wxBOTH );
    flexGridSizer1042->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1042->AddGrowableCol(1);
    flexGridSizer1042->AddGrowableRow(0);
    m_outPanel->SetSizer(flexGridSizer1042);
    
    flexGridSizer1046 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer1046->SetFlexibleDirection( wxBOTH );
    flexGridSizer1046->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1046->AddGrowableCol(1);
    flexGridSizer1046->AddGrowableRow(2);
    
    flexGridSizer1042->Add(flexGridSizer1046, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    m_staticBitmap2401 = new wxStaticBitmap(m_outPanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mill")), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0 );
    
    flexGridSizer1046->Add(m_staticBitmap2401, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1048 = new wxStaticText(m_outPanel, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1048Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1048Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1048->SetFont(m_staticText1048Font);
    
    flexGridSizer1046->Add(m_staticText1048, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    
    m_zSlider = new wxSlider(m_outPanel, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_VERTICAL);
    m_zSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));
    m_zSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
    wxFont m_zSliderFont(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zSlider->SetFont(m_zSliderFont);
    
    flexGridSizer1046->Add(m_zSlider, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    
    flexGridSizer742 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer742->SetFlexibleDirection( wxBOTH );
    flexGridSizer742->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer742->AddGrowableCol(0);
    flexGridSizer742->AddGrowableRow(1);
    
    flexGridSizer1042->Add(flexGridSizer742, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer768 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer768->SetFlexibleDirection( wxBOTH );
    flexGridSizer768->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer768->AddGrowableCol(0);
    flexGridSizer768->AddGrowableCol(1);
    flexGridSizer768->AddGrowableRow(0);
    
    flexGridSizer742->Add(flexGridSizer768, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer2404 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2404->SetFlexibleDirection( wxBOTH );
    flexGridSizer2404->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer768->Add(flexGridSizer2404, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_toolStateTrafficLight = new wxStaticBitmap(m_outPanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("trafficlights")), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0 );
    m_toolStateTrafficLight->SetToolTip(_("Tool State"));
    
    flexGridSizer2404->Add(m_toolStateTrafficLight, 1, wxALL, WXC_FROM_DIP(2));
    
    flexGridSizerOutPanel = new wxFlexGridSizer(0, 12, 0, 0);
    flexGridSizerOutPanel->SetFlexibleDirection( wxBOTH );
    flexGridSizerOutPanel->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerOutPanel->AddGrowableCol(0);
    flexGridSizerOutPanel->AddGrowableRow(0);
    
    flexGridSizer768->Add(flexGridSizerOutPanel, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticText16032 = new wxStaticText(m_outPanel, wxID_ANY, _("Cure Lib Resolution"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    
    flexGridSizerOutPanel->Add(m_staticText16032, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_cbCurveLibResolutionArr;
    m_cbCurveLibResolutionArr.Add(wxT("<AUTOMATIC>"));
    m_cbCurveLibResolutionArr.Add(wxT("0.001"));
    m_cbCurveLibResolutionArr.Add(wxT("0.002"));
    m_cbCurveLibResolutionArr.Add(wxT("0.003"));
    m_cbCurveLibResolutionArr.Add(wxT("0.004"));
    m_cbCurveLibResolutionArr.Add(wxT("0.005"));
    m_cbCurveLibResolutionArr.Add(wxT("0.006"));
    m_cbCurveLibResolutionArr.Add(wxT("0.007"));
    m_cbCurveLibResolutionArr.Add(wxT("0.008"));
    m_cbCurveLibResolutionArr.Add(wxT("0.009"));
    m_cbCurveLibResolutionArr.Add(wxT("0.010"));
    m_cbCurveLibResolutionArr.Add(wxT("0.020"));
    m_cbCurveLibResolutionArr.Add(wxT("0.030"));
    m_cbCurveLibResolutionArr.Add(wxT("0.050"));
    m_cbCurveLibResolutionArr.Add(wxT("0.060"));
    m_cbCurveLibResolutionArr.Add(wxT("0.070"));
    m_cbCurveLibResolutionArr.Add(wxT("0.080"));
    m_cbCurveLibResolutionArr.Add(wxT("0.090"));
    m_cbCurveLibResolutionArr.Add(wxT("0.100"));
    m_cbCurveLibResolutionArr.Add(wxT("0.200"));
    m_cbCurveLibResolutionArr.Add(wxT("0.300"));
    m_cbCurveLibResolutionArr.Add(wxT("0.400"));
    m_cbCurveLibResolutionArr.Add(wxT("0.500"));
    m_cbCurveLibResolutionArr.Add(wxT("0.600"));
    m_cbCurveLibResolutionArr.Add(wxT("0.700"));
    m_cbCurveLibResolutionArr.Add(wxT("0.900"));
    m_cbCurveLibResolutionArr.Add(wxT("1.000"));
    m_cbCurveLibResolution = new wxComboBox(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(100,-1)), m_cbCurveLibResolutionArr, wxCB_READONLY);
    
    flexGridSizerOutPanel->Add(m_cbCurveLibResolution, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_switchCoordType = new wxBitmapToggleButton(m_outPanel, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(26,26)), 0);
    m_switchCoordType->SetToolTip(_("Switch Coordinate System Type"));
    m_switchCoordType->SetValue(true);
    
    flexGridSizerOutPanel->Add(m_switchCoordType, 0, wxALL, WXC_FROM_DIP(1));
    m_switchCoordType->SetMinSize(wxSize(26,26));
    
    m_switchMonitoing = new wxBitmapToggleButton(m_outPanel, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(26,26)), 0);
    m_switchMonitoing->SetToolTip(_("Switch Monitoring (normal/minimal)"));
    m_switchMonitoing->SetValue(true);
    
    flexGridSizerOutPanel->Add(m_switchMonitoing, 0, wxALL, WXC_FROM_DIP(1));
    m_switchMonitoing->SetMinSize(wxSize(26,26));
    
    m_gridDrawPane = new wxBitmapToggleButton(m_outPanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-db-column")), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(26,26)), 0);
    m_gridDrawPane->SetToolTip(_("Show/Hide Grid"));
    m_gridDrawPane->SetValue(false);
    
    flexGridSizerOutPanel->Add(m_gridDrawPane, 0, wxALL, WXC_FROM_DIP(1));
    m_gridDrawPane->SetMinSize(wxSize(26,26));
    
    m_traceDrawPane = new wxButton(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_traceDrawPane->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")), wxRIGHT);
    m_traceDrawPane->SetBitmapMargins(2,2);
    #endif
    m_traceDrawPane->SetToolTip(_("Trace the DC Memory"));
    
    flexGridSizerOutPanel->Add(m_traceDrawPane, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(1));
    m_traceDrawPane->SetMinSize(wxSize(26,26));
    
    m_clearDrawPane = new wxButton(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_clearDrawPane->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxRIGHT);
    m_clearDrawPane->SetBitmapMargins(2,2);
    #endif
    m_clearDrawPane->SetToolTip(_("Clear the Motion Monitor"));
    
    flexGridSizerOutPanel->Add(m_clearDrawPane, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(1));
    m_clearDrawPane->SetMinSize(wxSize(26,26));
    
    m_staticText772 = new wxStaticText(m_outPanel, wxID_ANY, _("Zoom:"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    
    flexGridSizerOutPanel->Add(m_staticText772, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbDrawZoomFactorArr;
    m_cbDrawZoomFactorArr.Add(wxT("0.125"));
    m_cbDrawZoomFactorArr.Add(wxT("0.250"));
    m_cbDrawZoomFactorArr.Add(wxT("0.500"));
    m_cbDrawZoomFactorArr.Add(wxT("1.000"));
    m_cbDrawZoomFactorArr.Add(wxT("2.000"));
    m_cbDrawZoomFactorArr.Add(wxT("4.000"));
    m_cbDrawZoomFactorArr.Add(wxT("8.000"));
    m_cbDrawZoomFactor = new wxComboBox(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), m_cbDrawZoomFactorArr, wxCB_READONLY);
    m_cbDrawZoomFactor->SetToolTip(_("Determine Zoom Facor"));
    m_cbDrawZoomFactor->SetSelection(3);
    
    flexGridSizerOutPanel->Add(m_cbDrawZoomFactor, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText1054 = new wxStaticText(m_outPanel, wxID_ANY, _("Interval:"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    
    flexGridSizerOutPanel->Add(m_staticText1054, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUpdateIntervalArr;
    m_cbUpdateIntervalArr.Add(wxT("1"));
    m_cbUpdateIntervalArr.Add(wxT("10"));
    m_cbUpdateIntervalArr.Add(wxT("100"));
    m_cbUpdateIntervalArr.Add(wxT("1000"));
    m_cbUpdateInterval = new wxComboBox(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), m_cbUpdateIntervalArr, wxCB_READONLY);
    m_cbUpdateInterval->SetToolTip(_("Determine Update Interval"));
    m_cbUpdateInterval->SetSelection(1);
    
    flexGridSizerOutPanel->Add(m_cbUpdateInterval, 0, wxALL, WXC_FROM_DIP(2));
    
    m_drawPaneWindow = new wxScrolledWindow(m_outPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    m_drawPaneWindow->SetScrollRate(5, 5);
    
    flexGridSizer742->Add(m_drawPaneWindow, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer885 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer885->SetFlexibleDirection( wxBOTH );
    flexGridSizer885->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer885->AddGrowableCol(0);
    flexGridSizer885->AddGrowableCol(1);
    flexGridSizer885->AddGrowableRow(1);
    m_drawPaneWindow->SetSizer(flexGridSizer885);
    
    m_yAxisMarker = new wxPanel(m_drawPaneWindow, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_drawPaneWindow, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_yAxisMarker->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer885->Add(m_yAxisMarker, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_yAxisMarker->SetMinSize(wxSize(5,-1));
    
    flexGridSizer1416 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1416->SetFlexibleDirection( wxBOTH );
    flexGridSizer1416->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer885->Add(flexGridSizer1416, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_xAxisMarkerTop = new wxPanel(m_drawPaneWindow, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_drawPaneWindow, wxSize(-1,5)), wxTAB_TRAVERSAL);
    m_xAxisMarkerTop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer1416->Add(m_xAxisMarkerTop, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_xAxisMarkerTop->SetMinSize(wxSize(-1,5));
    
    m_drawPane = new wxPanel(m_drawPaneWindow, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_drawPaneWindow, wxSize(2000,2000)), wxTAB_TRAVERSAL);
    m_drawPane->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer1416->Add(m_drawPane, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_drawPane->SetMinSize(wxSize(2000,2000));
    
    m_xAxisMarkerBottom = new wxPanel(m_drawPaneWindow, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_drawPaneWindow, wxSize(-1,5)), wxTAB_TRAVERSAL);
    m_xAxisMarkerBottom->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer1416->Add(m_xAxisMarkerBottom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_xAxisMarkerBottom->SetMinSize(wxSize(-1,5));
    
    flexGridSizer936 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer936->SetFlexibleDirection( wxBOTH );
    flexGridSizer936->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer936->AddGrowableCol(2);
    flexGridSizer936->AddGrowableRow(0);
    
    flexGridSizer742->Add(flexGridSizer936, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    flexGridSizer1948 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1948->SetFlexibleDirection( wxBOTH );
    flexGridSizer1948->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer936->Add(flexGridSizer1948, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1950 = new wxStaticText(m_outPanel, wxID_ANY, _("Grid Unit"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1950Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1950->SetFont(m_staticText1950Font);
    
    flexGridSizer1948->Add(m_staticText1950, 0, wxALL, WXC_FROM_DIP(1));
    
    wxArrayString m_gridPosUnitArr;
    m_gridPosUnitArr.Add(wxT("mm"));
    m_gridPosUnitArr.Add(wxT("cm"));
    m_gridPosUnitArr.Add(wxT("in"));
    m_gridPosUnitArr.Add(wxT("px"));
    m_gridPosUnitArr.Add(wxT("pc"));
    m_gridPosUnitArr.Add(wxT("pt"));
    m_gridPosUnit = new wxComboBox(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,20)), m_gridPosUnitArr, wxCB_READONLY|wxBORDER_NONE);
    m_gridPosUnit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_gridPosUnitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_gridPosUnit->SetFont(m_gridPosUnitFont);
    m_gridPosUnit->SetSelection(0);
    
    flexGridSizer1948->Add(m_gridPosUnit, 0, wxALL, WXC_FROM_DIP(0));
    m_gridPosUnit->SetMinSize(wxSize(-1,20));
    
    flexGridSizer1909 = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer1909->SetFlexibleDirection( wxBOTH );
    flexGridSizer1909->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer936->Add(flexGridSizer1909, 1, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    m_staticText1943 = new wxStaticText(m_outPanel, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1943Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1943->SetFont(m_staticText1943Font);
    
    flexGridSizer1909->Add(m_staticText1943, 0, wxALL, WXC_FROM_DIP(2));
    
    m_drawPainPositionX = new wxTextCtrl(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_drawPainPositionX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_drawPainPositionXFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_drawPainPositionX->SetFont(m_drawPainPositionXFont);
    m_drawPainPositionX->SetToolTip(_("Grid Position X as Unit"));
    #if wxVERSION_NUMBER >= 3000
    m_drawPainPositionX->SetHint(wxT(""));
    #endif
    
    flexGridSizer1909->Add(m_drawPainPositionX, 0, wxALL, WXC_FROM_DIP(1));
    m_drawPainPositionX->SetMinSize(wxSize(60,14));
    
    m_staticText19431 = new wxStaticText(m_outPanel, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText19431Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText19431->SetFont(m_staticText19431Font);
    
    flexGridSizer1909->Add(m_staticText19431, 0, wxALL, WXC_FROM_DIP(2));
    
    m_drawPainPositionY = new wxTextCtrl(m_outPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_drawPainPositionY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_drawPainPositionYFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_drawPainPositionY->SetFont(m_drawPainPositionYFont);
    m_drawPainPositionY->SetToolTip(_("Grid Position Y as Unit"));
    #if wxVERSION_NUMBER >= 3000
    m_drawPainPositionY->SetHint(wxT(""));
    #endif
    
    flexGridSizer1909->Add(m_drawPainPositionY, 0, wxALL, WXC_FROM_DIP(1));
    m_drawPainPositionY->SetMinSize(wxSize(60,14));
    
    flexGridSizer1698 = new wxFlexGridSizer(2, 4, 0, 0);
    flexGridSizer1698->SetFlexibleDirection( wxBOTH );
    flexGridSizer1698->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer936->Add(flexGridSizer1698, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticText1696 = new wxStaticText(m_outPanel, wxID_ANY, _("Min(X,Y,Z):"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1696Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1696->SetFont(m_staticText1696Font);
    
    flexGridSizer1698->Add(m_staticText1696, 0, wxALL, WXC_FROM_DIP(1));
    
    m_minPosX = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_minPosX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_minPosXFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minPosX->SetFont(m_minPosXFont);
    
    flexGridSizer1698->Add(m_minPosX, 0, wxALL, WXC_FROM_DIP(1));
    m_minPosX->SetMinSize(wxSize(60,-1));
    
    m_minPosY = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_minPosY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_minPosYFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minPosY->SetFont(m_minPosYFont);
    
    flexGridSizer1698->Add(m_minPosY, 0, wxALL, WXC_FROM_DIP(1));
    m_minPosY->SetMinSize(wxSize(60,-1));
    
    m_minPosZ = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_minPosZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_minPosZFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minPosZ->SetFont(m_minPosZFont);
    
    flexGridSizer1698->Add(m_minPosZ, 0, wxALL, WXC_FROM_DIP(1));
    m_minPosZ->SetMinSize(wxSize(60,-1));
    
    m_staticText1694 = new wxStaticText(m_outPanel, wxID_ANY, _("Max(X,Y,Z):"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(-1,-1)), 0);
    wxFont m_staticText1694Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1694->SetFont(m_staticText1694Font);
    
    flexGridSizer1698->Add(m_staticText1694, 0, wxALL, WXC_FROM_DIP(1));
    
    m_maxPosX = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_maxPosX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_maxPosXFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxPosX->SetFont(m_maxPosXFont);
    
    flexGridSizer1698->Add(m_maxPosX, 0, wxALL, WXC_FROM_DIP(1));
    m_maxPosX->SetMinSize(wxSize(60,-1));
    
    m_maxPosY = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_maxPosY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_maxPosYFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxPosY->SetFont(m_maxPosYFont);
    
    flexGridSizer1698->Add(m_maxPosY, 0, wxALL, WXC_FROM_DIP(1));
    m_maxPosY->SetMinSize(wxSize(60,-1));
    
    m_maxPosZ = new wxStaticText(m_outPanel, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_outPanel, wxSize(60,-1)), wxALIGN_RIGHT);
    m_maxPosZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_maxPosZFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxPosZ->SetFont(m_maxPosZFont);
    
    flexGridSizer1698->Add(m_maxPosZ, 0, wxALL, WXC_FROM_DIP(1));
    m_maxPosZ->SetMinSize(wxSize(60,-1));
    
    m_3DPane = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_3DPaneImgIndex;
    m_3DPaneImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")));
    m_outboundNotebook->AddPage(m_3DPane, _("3D View"), false, m_3DPaneImgIndex);
    
    flexGridSizer2309 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2309->SetFlexibleDirection( wxBOTH );
    flexGridSizer2309->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2309->AddGrowableCol(1);
    flexGridSizer2309->AddGrowableRow(0);
    m_3DPane->SetSizer(flexGridSizer2309);
    
    flexGridSizer2311 = new wxFlexGridSizer(20, 1, 0, 0);
    flexGridSizer2311->SetFlexibleDirection( wxBOTH );
    flexGridSizer2311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2311->AddGrowableCol(0);
    
    flexGridSizer2309->Add(flexGridSizer2311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_3D_Animate = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Animate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-executable")), wxLEFT);
    m_3D_Animate->SetBitmapMargins(2,2);
    #endif
    m_3D_Animate->SetToolTip(_("Animate 3D View"));
    
    flexGridSizer2311->Add(m_3D_Animate, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Animate->SetMinSize(wxSize(24,24));
    
    m_3D_Refreh = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Refreh->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_3D_Refreh->SetBitmapMargins(2,2);
    #endif
    m_3D_Refreh->SetToolTip(_("Refresh 3D View"));
    
    flexGridSizer2311->Add(m_3D_Refreh, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Refreh->SetMinSize(wxSize(24,24));
    
    m_3D_Clear = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Clear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_3D_Clear->SetBitmapMargins(2,2);
    #endif
    m_3D_Clear->SetToolTip(_("Clear 3D View"));
    
    flexGridSizer2311->Add(m_3D_Clear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Clear->SetMinSize(wxSize(24,24));
    
    m_staticLine2348 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine2348, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_3D_Top = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Top->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_red_S")), wxLEFT);
    m_3D_Top->SetBitmapMargins(2,2);
    #endif
    m_3D_Top->SetToolTip(_("Show from Top"));
    
    flexGridSizer2311->Add(m_3D_Top, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Top->SetMinSize(wxSize(24,24));
    
    m_3D_Bottom = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Bottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_red_N")), wxLEFT);
    m_3D_Bottom->SetBitmapMargins(2,2);
    #endif
    m_3D_Bottom->SetToolTip(_("Show from Bottom"));
    
    flexGridSizer2311->Add(m_3D_Bottom, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Bottom->SetMinSize(wxSize(24,24));
    
    m_3D_Front = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Front->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_green_N")), wxLEFT);
    m_3D_Front->SetBitmapMargins(2,2);
    #endif
    m_3D_Front->SetToolTip(_("Show from Front"));
    
    flexGridSizer2311->Add(m_3D_Front, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Front->SetMinSize(wxSize(24,24));
    
    m_3D_Rear = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Rear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_green_S")), wxLEFT);
    m_3D_Rear->SetBitmapMargins(2,2);
    #endif
    m_3D_Rear->SetToolTip(_("Show from Rear"));
    
    flexGridSizer2311->Add(m_3D_Rear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Rear->SetMinSize(wxSize(24,24));
    
    m_3D_Left = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Left->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_blue_E")), wxLEFT);
    m_3D_Left->SetBitmapMargins(2,2);
    #endif
    m_3D_Left->SetToolTip(_("Show from Left"));
    
    flexGridSizer2311->Add(m_3D_Left, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Left->SetMinSize(wxSize(24,24));
    
    m_3D_Right4 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Right4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("arrow_plain_blue_W")), wxLEFT);
    m_3D_Right4->SetBitmapMargins(2,2);
    #endif
    m_3D_Right4->SetToolTip(_("Show from Right"));
    
    flexGridSizer2311->Add(m_3D_Right4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Right4->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cmake")), wxLEFT);
    m_3D_Perspective->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective->SetToolTip(_("Show 3D"));
    
    flexGridSizer2311->Add(m_3D_Perspective, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective->SetMinSize(wxSize(24,24));
    
    m_staticLine2341 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine2341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button2345 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button2345->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")), wxLEFT);
    m_button2345->SetBitmapMargins(2,2);
    #endif
    m_button2345->SetToolTip(_("Run OpenGL Test"));
    
    flexGridSizer2311->Add(m_button2345, 0, wxALL, WXC_FROM_DIP(1));
    m_button2345->SetMinSize(wxSize(24,24));
    
    m_staticLine2343 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine2343, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2311->Add(0, 10, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2329 = new wxStaticText(m_3DPane, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), wxALIGN_CENTRE);
    m_staticText2329->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    wxFont m_staticText2329Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText2329Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText2329->SetFont(m_staticText2329Font);
    
    flexGridSizer2311->Add(m_staticText2329, 0, wxALL, WXC_FROM_DIP(1));
    m_staticText2329->SetMinSize(wxSize(24,24));
    
    m_staticText2331 = new wxStaticText(m_3DPane, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), wxALIGN_CENTRE);
    m_staticText2331->SetForegroundColour(wxColour(wxT("rgb(0,128,0)")));
    wxFont m_staticText2331Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText2331Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText2331->SetFont(m_staticText2331Font);
    
    flexGridSizer2311->Add(m_staticText2331, 0, wxALL, WXC_FROM_DIP(1));
    m_staticText2331->SetMinSize(wxSize(24,24));
    
    m_staticText2333 = new wxStaticText(m_3DPane, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), wxALIGN_CENTRE);
    m_staticText2333->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_staticText2333Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText2333Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText2333->SetFont(m_staticText2333Font);
    
    flexGridSizer2311->Add(m_staticText2333, 0, wxALL, WXC_FROM_DIP(1));
    m_staticText2333->SetMinSize(wxSize(24,24));
    
    m_panel2590 = new wxPanel(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel2590->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer2309->Add(m_panel2590, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2360 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2360->SetFlexibleDirection( wxBOTH );
    flexGridSizer2360->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2360->AddGrowableCol(0);
    flexGridSizer2360->AddGrowableRow(0);
    m_panel2590->SetSizer(flexGridSizer2360);
    
    m_drawPane3D = new wxPanel(m_panel2590, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel2590, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_drawPane3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_drawPane3D->SetToolTip(_("OpenGl Control placeholder"));
    
    flexGridSizer2360->Add(m_drawPane3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_trace3D = new wxTextCtrl(m_panel2590, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel2590, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_trace3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_trace3D->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_trace3D->SetHint(wxT(""));
    #endif
    
    flexGridSizer2360->Add(m_trace3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel2696 = new wxPanel(m_panel2590, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel2590, wxSize(-1,24)), wxTAB_TRAVERSAL|wxBORDER_NONE);
    m_panel2696->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer2360->Add(m_panel2696, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    flexGridSizer267117 = new wxFlexGridSizer(1, 10, 0, 0);
    flexGridSizer267117->SetFlexibleDirection( wxBOTH );
    flexGridSizer267117->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel2696->SetSizer(flexGridSizer267117);
    
    wxArrayString m_planeSelect3DArr;
    m_planeSelect3DArr.Add(wxT("XY"));
    m_planeSelect3DArr.Add(wxT("YZ"));
    m_planeSelect3DArr.Add(wxT("ZX"));
    m_planeSelect3D = new wxComboBox(m_panel2696, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(-1,20)), m_planeSelect3DArr, wxCB_READONLY);
    wxFont m_planeSelect3DFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_planeSelect3D->SetFont(m_planeSelect3DFont);
    m_planeSelect3D->SetSelection(0);
    
    flexGridSizer267117->Add(m_planeSelect3D, 0, wxALL, WXC_FROM_DIP(2));
    m_planeSelect3D->SetMinSize(wxSize(-1,20));
    
    m_staticText268320 = new wxStaticText(m_panel2696, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(-1,-1)), 0);
    m_staticText268320->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer267117->Add(m_staticText268320, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spin3DAngelX = new wxSpinCtrl(m_panel2696, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(60,20)), wxSP_ARROW_KEYS);
    m_spin3DAngelX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_spin3DAngelX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_spin3DAngelXFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_spin3DAngelX->SetFont(m_spin3DAngelXFont);
    m_spin3DAngelX->SetRange(-360, 360);
    m_spin3DAngelX->SetValue(0);
    
    flexGridSizer267117->Add(m_spin3DAngelX, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    m_spin3DAngelX->SetMinSize(wxSize(60,20));
    
    m_staticText268522 = new wxStaticText(m_panel2696, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(-1,-1)), 0);
    m_staticText268522->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer267117->Add(m_staticText268522, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spin3DAngelY = new wxSpinCtrl(m_panel2696, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(60,20)), wxSP_ARROW_KEYS);
    m_spin3DAngelY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_spin3DAngelY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_spin3DAngelYFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_spin3DAngelY->SetFont(m_spin3DAngelYFont);
    m_spin3DAngelY->SetRange(-360, 360);
    m_spin3DAngelY->SetValue(0);
    
    flexGridSizer267117->Add(m_spin3DAngelY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_spin3DAngelY->SetMinSize(wxSize(60,20));
    
    m_staticText268118 = new wxStaticText(m_panel2696, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(-1,-1)), 0);
    m_staticText268118->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer267117->Add(m_staticText268118, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    
    m_spin3DAngelZ = new wxSpinCtrl(m_panel2696, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panel2696, wxSize(60,20)), wxSP_ARROW_KEYS);
    m_spin3DAngelZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_spin3DAngelZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_spin3DAngelZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_spin3DAngelZ->SetFont(m_spin3DAngelZFont);
    m_spin3DAngelZ->SetRange(-360, 360);
    m_spin3DAngelZ->SetValue(0);
    
    flexGridSizer267117->Add(m_spin3DAngelZ, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    m_spin3DAngelZ->SetMinSize(wxSize(60,20));
    m_panel2696->SetMinSize(wxSize(-1,24));
    
    m_svgEmuResult = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_svgEmuResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    int m_svgEmuResultImgIndex;
    m_svgEmuResultImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_outboundNotebook->AddPage(m_svgEmuResult, _("SVG Output"), false, m_svgEmuResultImgIndex);
    
    flexGridSizer585 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer585->SetFlexibleDirection( wxBOTH );
    flexGridSizer585->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer585->AddGrowableCol(1);
    flexGridSizer585->AddGrowableRow(0);
    m_svgEmuResult->SetSizer(flexGridSizer585);
    
    flexGridSizer766 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer766->SetFlexibleDirection( wxBOTH );
    flexGridSizer766->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer585->Add(flexGridSizer766, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_svgEmuOpenFileAsSource = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuOpenFileAsSource->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_svgEmuOpenFileAsSource->SetBitmapMargins(2,2);
    #endif
    m_svgEmuOpenFileAsSource->SetToolTip(_("Open SVG extern as Source"));
    
    flexGridSizer766->Add(m_svgEmuOpenFileAsSource, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuOpenFileAsSource->SetMinSize(wxSize(24,24));
    
    m_svgEmuOpenFileAsSvg = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuOpenFileAsSvg->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")), wxLEFT);
    m_svgEmuOpenFileAsSvg->SetBitmapMargins(2,2);
    #endif
    m_svgEmuOpenFileAsSvg->SetToolTip(_("Open SVG extern as SVG"));
    
    flexGridSizer766->Add(m_svgEmuOpenFileAsSvg, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuOpenFileAsSvg->SetMinSize(wxSize(24,24));
    
    m_svgEmuReload = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuReload->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_svgEmuReload->SetBitmapMargins(2,2);
    #endif
    m_svgEmuReload->SetToolTip(_("Reload SVG"));
    
    flexGridSizer766->Add(m_svgEmuReload, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuReload->SetMinSize(wxSize(24,24));
    
    m_svgEmuClear = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_svgEmuClear->SetBitmapMargins(2,2);
    #endif
    m_svgEmuClear->SetToolTip(_("Clear SVG"));
    
    flexGridSizer766->Add(m_svgEmuClear, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuClear->SetMinSize(wxSize(24,24));
    
    flexGridSizer766->Add(0, 10, 1, wxALL, WXC_FROM_DIP(5));
    
    m_switchCoordTypeSvgOut = new wxBitmapToggleButton(m_svgEmuResult, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    m_switchCoordTypeSvgOut->SetToolTip(_("Switch Coordinate System Type"));
    m_switchCoordTypeSvgOut->SetValue(true);
    
    flexGridSizer766->Add(m_switchCoordTypeSvgOut, 0, wxALL, WXC_FROM_DIP(0));
    m_switchCoordTypeSvgOut->SetMinSize(wxSize(24,24));
    
    m_svgEmuToggleOrigPath = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuToggleOrigPath->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-find_and_replace")), wxLEFT);
    m_svgEmuToggleOrigPath->SetBitmapMargins(2,2);
    #endif
    m_svgEmuToggleOrigPath->SetToolTip(_("Show/Hide Original Path"));
    
    flexGridSizer766->Add(m_svgEmuToggleOrigPath, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuToggleOrigPath->SetMinSize(wxSize(24,24));
    
    flexGridSizer766->Add(0, 20, 1, wxALL, WXC_FROM_DIP(5));
    
    m_svgEmuZoomHome = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomHome->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-home")), wxLEFT);
    m_svgEmuZoomHome->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomHome->SetToolTip(_("Home"));
    
    flexGridSizer766->Add(m_svgEmuZoomHome, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomHome->SetMinSize(wxSize(24,24));
    
    m_svgEmuZoomMinus = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomMinus->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_svgEmuZoomMinus->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomMinus->SetToolTip(_("Zoom -"));
    
    flexGridSizer766->Add(m_svgEmuZoomMinus, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomMinus->SetMinSize(wxSize(24,24));
    
    m_svgEmuZoomPlus = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomPlus->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-plus")), wxLEFT);
    m_svgEmuZoomPlus->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomPlus->SetToolTip(_("Zoom +"));
    
    flexGridSizer766->Add(m_svgEmuZoomPlus, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomPlus->SetMinSize(wxSize(24,24));
    
    #if wxUSE_WEBVIEW
    m_svgView = wxWebView::New(m_svgEmuResult, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    m_svgView->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer585->Add(m_svgView, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_svgEmuSource = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_svgEmuSourceImgIndex;
    m_svgEmuSourceImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_outboundNotebook->AddPage(m_svgEmuSource, _("SVG Source"), false, m_svgEmuSourceImgIndex);
    
    flexGridSizer1891 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1891->SetFlexibleDirection( wxBOTH );
    flexGridSizer1891->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1891->AddGrowableCol(1);
    flexGridSizer1891->AddGrowableRow(0);
    m_svgEmuSource->SetSizer(flexGridSizer1891);
    
    flexGridSizer1899 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1899->SetFlexibleDirection( wxBOTH );
    flexGridSizer1899->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1891->Add(flexGridSizer1899, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgEmuToggleWordWrap = new wxBitmapToggleButton(m_svgEmuSource, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_svgEmuSource, wxSize(24,24)), 0);
    m_svgEmuToggleWordWrap->SetToolTip(_("Toggle Word Wrap Mode"));
    m_svgEmuToggleWordWrap->SetValue(true);
    
    flexGridSizer1899->Add(m_svgEmuToggleWordWrap, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuToggleWordWrap->SetMinSize(wxSize(24,24));
    
    m_stcEmuSource = new wxStyledTextCtrl(m_svgEmuSource, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_svgEmuSource, wxSize(-1,-1)), 0);
    // Configure the fold margin
    m_stcEmuSource->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcEmuSource->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcEmuSource->SetMarginSensitive(4, true);
    m_stcEmuSource->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcEmuSource->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcEmuSource->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcEmuSource->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcEmuSource->SetMarginWidth(2, 0);
    m_stcEmuSource->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcEmuSource_PixelWidth = 4 + 5 *m_stcEmuSource->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcEmuSource->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcEmuSource->SetMarginWidth(0,m_stcEmuSource_PixelWidth);
    
    // Configure the line symbol margin
    m_stcEmuSource->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcEmuSource->SetMarginMask(3, 0);
    m_stcEmuSource->SetMarginWidth(3,1);
    // Select the lexer
    m_stcEmuSource->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcEmuSource->StyleClearAll();
    m_stcEmuSource->SetWrapMode(0);
    m_stcEmuSource->SetIndentationGuides(0);
    m_stcEmuSource->SetKeyWords(0, wxT(""));
    m_stcEmuSource->SetKeyWords(1, wxT(""));
    m_stcEmuSource->SetKeyWords(2, wxT(""));
    m_stcEmuSource->SetKeyWords(3, wxT(""));
    m_stcEmuSource->SetKeyWords(4, wxT(""));
    
    flexGridSizer1891->Add(m_stcEmuSource, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgTracePreview = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_svgTracePreviewImgIndex;
    m_svgTracePreviewImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_outboundNotebook->AddPage(m_svgTracePreview, _("SVG Trace"), false, m_svgTracePreviewImgIndex);
    
    flexGridSizer1720 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1720->SetFlexibleDirection( wxBOTH );
    flexGridSizer1720->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1720->AddGrowableCol(1);
    flexGridSizer1720->AddGrowableRow(0);
    m_svgTracePreview->SetSizer(flexGridSizer1720);
    
    flexGridSizer1858 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1858->SetFlexibleDirection( wxBOTH );
    flexGridSizer1858->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1720->Add(flexGridSizer1858, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_openXmlTraceAsText = new wxBitmapButton(m_svgTracePreview, wxID_ANY, wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxDefaultPosition, wxDLG_UNIT(m_svgTracePreview, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_openXmlTraceAsText->SetToolTip(_("Open XML Extern as Text"));
    
    flexGridSizer1858->Add(m_openXmlTraceAsText, 0, wxALL, WXC_FROM_DIP(1));
    
    m_openXmlTrace = new wxBitmapButton(m_svgTracePreview, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-globals")), wxDefaultPosition, wxDLG_UNIT(m_svgTracePreview, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_openXmlTrace->SetToolTip(_("Open XML Extern"));
    
    flexGridSizer1858->Add(m_openXmlTrace, 0, wxALL, WXC_FROM_DIP(1));
    
    m_copySvgTrace = new wxBitmapButton(m_svgTracePreview, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxDefaultPosition, wxDLG_UNIT(m_svgTracePreview, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_copySvgTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_copySvgTrace->SetToolTip(_("Copy the SVG  Trace"));
    
    flexGridSizer1858->Add(m_copySvgTrace, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer1723 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1723->SetFlexibleDirection( wxBOTH );
    flexGridSizer1723->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1723->AddGrowableCol(0);
    flexGridSizer1723->AddGrowableRow(0);
    
    flexGridSizer1720->Add(flexGridSizer1723, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    #if wxUSE_WEBVIEW
    m_svgTrace = wxWebView::New(m_svgTracePreview, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_svgTracePreview, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer1723->Add(m_svgTrace, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    #endif // wxUSE_WEBVIEW
    
    m_menuBar = new wxMenuBar(wxMB_DOCKABLE);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("&File"));
    
    m_miNewTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("New Template"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miNewTemplate);
    
    m_miOpenTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Open Template"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miOpenTemplate);
    
    m_miReloadTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Reload Template"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miReloadTemplate);
    
    m_miSaveTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miSaveTemplate);
    
    m_miSaveTemplateAs = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template as"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miSaveTemplateAs);
    
    m_miSaveEmuOutput = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Emulator Output as Template"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miSaveEmuOutput);
    
    m_menuFile->AppendSeparator();
    
    m_miReinit = new wxMenuItem(m_menuFile, wxID_ANY, _("Re-Initialize controller from INI File"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miReinit);
    
    m_menuFile->AppendSeparator();
    
    m_miExit = new wxMenuItem(m_menuFile, wxID_ANY, _("Exit"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_miExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("View"));
    
    m_miToolbar = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Toolbar"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miToolbar);
    
    m_miViewMainView = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Main View"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewMainView);
    
    m_miViewTemplateManager = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Template Manager"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewTemplateManager);
    
    m_miViewLogger = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Logger"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewLogger);
    
    m_miViewMonitor = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Monitor"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewMonitor);
    
    m_menuView->AppendSeparator();
    
    m_miViewAll = new wxMenuItem(m_menuView, wxID_ANY, _("View all Panes"), wxT(""), wxITEM_NORMAL);
    m_menuView->Append(m_miViewAll);
    
    m_miHideAll = new wxMenuItem(m_menuView, wxID_ANY, _("Hide all Panes"), wxT(""), wxITEM_NORMAL);
    m_menuView->Append(m_miHideAll);
    
    m_menuMonitoring = new wxMenu();
    m_menuBar->Append(m_menuMonitoring, _("Monitoring"));
    
    m_menuItemUpdCoors = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Coordinates"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdCoors);
    m_menuItemUpdCoors->Check();
    
    m_menuItemUpdDraw = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Online Preview"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdDraw);
    m_menuItemUpdDraw->Check();
    
    m_menuItemAllowEvents = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Allow Events"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemAllowEvents);
    m_menuItemAllowEvents->Check();
    
    m_menuItemDisplayUserAgent = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Display User Agent Content"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDisplayUserAgent);
    m_menuItemDisplayUserAgent->Check();
    
    m_menuItemToolControls = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Tool-/Speed-Controls"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemToolControls);
    m_menuItemToolControls->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemDebugSerial = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Trace Serial (very slow)"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDebugSerial);
    
    m_menuItemFreezeLogger = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Unfreeze Logger"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemFreezeLogger);
    m_menuItemFreezeLogger->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemMinMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Minimal Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuMonitoring->Append(m_menuItemMinMonitoring);
    
    m_menuItemNormalMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Standard Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuMonitoring->Append(m_menuItemNormalMonitoring);
    
    m_menuRequestor = new wxMenu();
    m_menuBar->Append(m_menuRequestor, _("Controller Requests"));
    
    m_miRqtIdleMessages = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Request Idle Messages"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miRqtIdleMessages);
    m_miRqtIdleMessages->Check();
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtVersion = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Software Version"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtVersion);
    
    m_miRqtConfig = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Config"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtConfig);
    
    m_miRqtPins = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Pin Report"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtPins);
    
    m_miRqtErrorInfo = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Error Info"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtErrorInfo);
    
    m_menuRequestor->AppendSeparator();
    
    m_miMotorEnableState = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Enable stepper motors"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miMotorEnableState);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtCurPos = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Position"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtCurPos);
    
    m_miRqtLimit = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Limit State"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtLimit);
    
    m_menuRequestor->AppendSeparator();
    
    m_miReset = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Reset Controller"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miReset);
    
    m_menuTools = new wxMenu();
    m_menuBar->Append(m_menuTools, _("Tools"));
    
    m_miManuallyDissolveEndState = new wxMenuItem(m_menuTools, wxID_ANY, _("Manually Dissolve End States"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miManuallyDissolveEndState);
    
    m_menuTools->AppendSeparator();
    
    m_miPathGenerator = new wxMenuItem(m_menuTools, wxID_ANY, _("SVG Path Generator"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miPathGenerator);
    
    m_miIniFile = new wxMenuItem(m_menuTools, wxID_ANY, _("Configuration File"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miIniFile);
    
    m_miExternalEditor = new wxMenuItem(m_menuTools, wxID_ANY, _("External Editor"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miExternalEditor);
    
    m_miCalculator = new wxMenuItem(m_menuTools, wxID_ANY, _("Calculator"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miCalculator);
    
    m_miPyCam = new wxMenuItem(m_menuTools, wxID_ANY, _("PyCAM"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_miPyCam);
    
    m_menuTest = new wxMenu();
    m_menuBar->Append(m_menuTest, _("Test"));
    
    m_miTest1 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test 1"), wxT(""), wxITEM_NORMAL);
    m_menuTest->Append(m_miTest1);
    
    m_miTest2 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test 2"), wxT(""), wxITEM_NORMAL);
    m_menuTest->Append(m_miTest2);
    
    m_miTest3 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test 3"), wxT(""), wxITEM_NORMAL);
    m_menuTest->Append(m_miTest3);
    
    m_miTest4 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test 4"), wxT(""), wxITEM_NORMAL);
    m_menuTest->Append(m_miTest4);
    
    m_menuAbout = new wxMenu();
    m_menuBar->Append(m_menuAbout, _("Help"));
    
    m_menuItem309 = new wxMenuItem(m_menuAbout, wxID_ANY, _("About"), wxT(""), wxITEM_NORMAL);
    m_menuAbout->Append(m_menuItem309);
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, true);
    
    m_serialTimer = new wxTimer;
    m_serialTimer->Start(500, false);
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_mainNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_mainNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_mainNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_listbook2220)){
        wxPersistenceManager::Get().RegisterAndRestore(m_listbook2220);
    } else {
        wxPersistenceManager::Get().Restore(m_listbook2220);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_treebookTest)){
        wxPersistenceManager::Get().RegisterAndRestore(m_treebookTest);
    } else {
        wxPersistenceManager::Get().Restore(m_treebookTest);
    }
    #endif
    m_treebookTest->ExpandNode( 0, true );
    m_treebookTest->ExpandNode( 1, true );
    m_treebookTest->ExpandNode( 2, true );
    m_treebookTest->ExpandNode( 3, true );
    m_treebookTest->ExpandNode( 4, true );
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_templateNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_templateNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_templateNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_templateTreeBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_templateTreeBook);
    } else {
        wxPersistenceManager::Get().Restore(m_templateTreeBook);
    }
    #endif
    m_templateTreeBook->ExpandNode( 0, true );
    m_templateTreeBook->ExpandNode( 1, true );
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_outboundNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_outboundNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_outboundNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebookConfig)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebookConfig);
    } else {
        wxPersistenceManager::Get().Restore(m_notebookConfig);
    }
    #endif
    
    SetName(wxT("MainFrameBClass"));
    SetSize(700,600);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_portSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_unit->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_rcReset->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    this->Connect(m_miRcRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::rcSelectRunMode), NULL, this);
    this->Connect(m_miRcDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::rcSelectRunMode), NULL, this);
    m_rcRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcNextPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextPath), NULL, this);
    m_rcNextStep->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_controlerPause->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::controlerPause), NULL, this);
    m_btnEmergenyStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::mainBookPageChanged), NULL, this);
    m_mainNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::mainBookPageChanging), NULL, this);
    m_spinButtonX->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpX), NULL, this);
    m_spinButtonX->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownX), NULL, this);
    m_spinButtonY->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinDownY), NULL, this);
    m_spinButtonY->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinUpY), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownXY), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveXYAxis), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveXYAxis), NULL, this);
    m_spinButtonZ->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpZ), NULL, this);
    m_spinButtonZ->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownZ), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownZ), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveZAxis), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveZAxis), NULL, this);
    m_includingWpt->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::updateInclWpt), NULL, this);
    m_setZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setZero), NULL, this);
    m_moveHome->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_workpieceThickness->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusWorkpieceThickness), NULL, this);
    m_crossingThickness->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusCrossingThickness), NULL, this);
    m_routerBitDiameter->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusRouterDiameter), NULL, this);
    m_replyThreshold->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusReplyThreshold), NULL, this);
    m_cbStepSignX->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateReverseStepSignX), NULL, this);
    m_cbStepSignY->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateReverseStepSignY), NULL, this);
    m_maxXYSpeed->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxSpeedXY), NULL, this);
    m_flySpeedXY->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateFlySpeedXY), NULL, this);
    m_workSpeedXY->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateWorkSpeedXY), NULL, this);
    m_currentSpeedXY->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurrentSpeedXY), NULL, this);
    m_button266116->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::configureXYSpeedWithZValues), NULL, this);
    m_maxZSpeed->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxSpeedZ), NULL, this);
    m_flySpeedZ->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateFlySpeedZ), NULL, this);
    m_workSpeedZ->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateWorkSpeedZ), NULL, this);
    m_currentSpeedZ->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurrentSpeedZ), NULL, this);
    m_button2661->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::configureZSpeedWithXYValues), NULL, this);
    m_maxXDimension->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionX), NULL, this);
    m_maxYDimension->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionY), NULL, this);
    m_maxZDimension->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionZ), NULL, this);
    m_treebookTest->Connect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(MainFrameBClass::treebookTestChanged), NULL, this);
    m_testIntervalMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_ctrlTestSelection->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::ctrlTestCaseSelected), NULL, this);
    m_checkManuallyXY->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyXY), NULL, this);
    m_minManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_checkManuallyZ->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyZ), NULL, this);
    m_minManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZEdit->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_openSourceExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_previewErrorInfo->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePreviewErrorInfo), NULL, this);
    m_stcFileContent->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::fileContentKeyDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentLeftDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(MainFrameBClass::fileContentLeftUp), NULL, this);
    m_stcFileContent->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentRightDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickFileContent), NULL, this);
    m_stcFileContent->Connect(wxEVT_KEY_UP, wxKeyEventHandler(MainFrameBClass::fileContentKeyUp), NULL, this);
    m_stcFileContent->Connect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBClass::fileContentChange), NULL, this);
    m_tbCaseSensitive->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_svgEditSearch->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_svgEditSearch->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_dvListCtrlSvgDebuggerInfoBase->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoBase), NULL, this);
    m_dvListCtrlSvgDebuggerInfoPath->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoPath), NULL, this);
    m_dvListCtrlSvgDebuggerInfoDetail->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoDetail), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_scrollWinFile->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_scrollWinFile->Connect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1644->Connect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1644->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveLruList), NULL, this);
    m_btDefaultDir->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::selectDefaultDirectory), NULL, this);
    m_btCurrentFile->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::selectCurrentFile), NULL, this);
    m_staticText1647->Connect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1647->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_dirCtrl->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(MainFrameBClass::dirCtrlChanged), NULL, this);
    m_dirCtrl->Connect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, wxTreeEventHandler(MainFrameBClass::dirCtrlActivated), NULL, this);
    m_clearLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_tmpTraceInfo->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_speedX->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_speedY->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_speedZ->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_cmdDuration->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_xMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Connect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_button1473->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearProcessedSetterList), NULL, this);
    m_btRequestCtlConfig->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestCtlPins->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btRequestCtlErrorInfo->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerErrorInfoFromButton), NULL, this);
    m_zSlider->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_cbCurveLibResolution->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurveLibResolution), NULL, this);
    m_switchCoordType->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchCoordinateSystemType), NULL, this);
    m_switchMonitoing->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_gridDrawPane->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::gridDrawPane), NULL, this);
    m_traceDrawPane->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::traceDrawPane), NULL, this);
    m_clearDrawPane->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearDrawPane), NULL, this);
    m_cbDrawZoomFactor->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::zoomDrawPane), NULL, this);
    m_cbUpdateInterval->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::changeUpdateInterval), NULL, this);
    m_drawPane->Connect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintDrawPane), NULL, this);
    m_drawPane->Connect(wxEVT_MOTION, wxMouseEventHandler(MainFrameBClass::onMotionDrawPane), NULL, this);
    m_drawPane->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::onLeaveDrawPane), NULL, this);
    m_gridPosUnit->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectGridPosUnit), NULL, this);
    m_3D_Animate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::animate3D), NULL, this);
    m_3D_Refreh->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refresh3D), NULL, this);
    m_3D_Clear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clear3D), NULL, this);
    m_3D_Top->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_button2345->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::runOpenGLTest), NULL, this);
    m_planeSelect3D->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectedPlane3D), NULL, this);
    m_spin3DAngelX->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelX), NULL, this);
    m_spin3DAngelX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelX), NULL, this);
    m_spin3DAngelY->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelY), NULL, this);
    m_spin3DAngelY->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelY), NULL, this);
    m_spin3DAngelZ->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelZ), NULL, this);
    m_spin3DAngelZ->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelZ), NULL, this);
    m_svgEmuOpenFileAsSource->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSource), NULL, this);
    m_svgEmuOpenFileAsSvg->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSvg), NULL, this);
    m_svgEmuReload->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuReload), NULL, this);
    m_svgEmuClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuClear), NULL, this);
    m_switchCoordTypeSvgOut->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchCoordinateSystemTypeSvgOut), NULL, this);
    m_svgEmuToggleOrigPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuToogleOriginalPath), NULL, this);
    m_svgEmuZoomHome->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomHome), NULL, this);
    m_svgEmuZoomMinus->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomMinus), NULL, this);
    m_svgEmuZoomPlus->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomPlus), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_svgEmuToggleWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleEmuWordWrapMode), NULL, this);
    m_stcEmuSource->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::emuContentRightDown), NULL, this);
    m_stcEmuSource->Connect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickEmuSource), NULL, this);
    m_openXmlTraceAsText->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openXMLTraceAsText), NULL, this);
    m_openXmlTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::OpenXmlTrace), NULL, this);
    m_copySvgTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copySvgTrace), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    this->Connect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Connect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Connect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Connect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Connect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Connect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveEmuOutput), NULL, this);
    this->Connect(m_miReinit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reinit), NULL, this);
    this->Connect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Connect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Connect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Connect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Connect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Connect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Connect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Connect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Connect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Connect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Connect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Connect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Connect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Connect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Connect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Connect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Connect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Connect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Connect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Connect(m_miRqtErrorInfo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorInfo), NULL, this);
    this->Connect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Connect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Connect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Connect(m_miReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Connect(m_miManuallyDissolveEndState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::dissolveEndSwitchStates), NULL, this);
    this->Connect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Connect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Connect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Connect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Connect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Connect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Connect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Connect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Connect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Connect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}

MainFrameBClass::~MainFrameBClass()
{
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_portSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_unit->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_rcReset->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    this->Disconnect(m_miRcRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::rcSelectRunMode), NULL, this);
    this->Disconnect(m_miRcDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::rcSelectRunMode), NULL, this);
    m_rcRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcNextPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextPath), NULL, this);
    m_rcNextStep->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_controlerPause->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::controlerPause), NULL, this);
    m_btnEmergenyStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::mainBookPageChanged), NULL, this);
    m_mainNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::mainBookPageChanging), NULL, this);
    m_spinButtonX->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpX), NULL, this);
    m_spinButtonX->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownX), NULL, this);
    m_spinButtonY->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinDownY), NULL, this);
    m_spinButtonY->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinUpY), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownXY), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveXYAxis), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveXYAxis), NULL, this);
    m_spinButtonZ->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpZ), NULL, this);
    m_spinButtonZ->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownZ), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownZ), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveZAxis), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveZAxis), NULL, this);
    m_includingWpt->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::updateInclWpt), NULL, this);
    m_setZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setZero), NULL, this);
    m_moveHome->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_workpieceThickness->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusWorkpieceThickness), NULL, this);
    m_crossingThickness->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusCrossingThickness), NULL, this);
    m_routerBitDiameter->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusRouterDiameter), NULL, this);
    m_replyThreshold->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusReplyThreshold), NULL, this);
    m_cbStepSignX->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateReverseStepSignX), NULL, this);
    m_cbStepSignY->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateReverseStepSignY), NULL, this);
    m_maxXYSpeed->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxSpeedXY), NULL, this);
    m_flySpeedXY->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateFlySpeedXY), NULL, this);
    m_workSpeedXY->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateWorkSpeedXY), NULL, this);
    m_currentSpeedXY->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurrentSpeedXY), NULL, this);
    m_button266116->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::configureXYSpeedWithZValues), NULL, this);
    m_maxZSpeed->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxSpeedZ), NULL, this);
    m_flySpeedZ->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateFlySpeedZ), NULL, this);
    m_workSpeedZ->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateWorkSpeedZ), NULL, this);
    m_currentSpeedZ->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurrentSpeedZ), NULL, this);
    m_button2661->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::configureZSpeedWithXYValues), NULL, this);
    m_maxXDimension->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionX), NULL, this);
    m_maxYDimension->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionY), NULL, this);
    m_maxZDimension->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMaxDimensionZ), NULL, this);
    m_treebookTest->Disconnect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(MainFrameBClass::treebookTestChanged), NULL, this);
    m_testIntervalMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_ctrlTestSelection->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::ctrlTestCaseSelected), NULL, this);
    m_checkManuallyXY->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyXY), NULL, this);
    m_minManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_checkManuallyZ->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyZ), NULL, this);
    m_minManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZEdit->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_openSourceExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_previewErrorInfo->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePreviewErrorInfo), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::fileContentKeyDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentLeftDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(MainFrameBClass::fileContentLeftUp), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentRightDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickFileContent), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_KEY_UP, wxKeyEventHandler(MainFrameBClass::fileContentKeyUp), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBClass::fileContentChange), NULL, this);
    m_tbCaseSensitive->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_svgEditSearch->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_svgEditSearch->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_dvListCtrlSvgDebuggerInfoBase->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoBase), NULL, this);
    m_dvListCtrlSvgDebuggerInfoPath->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoPath), NULL, this);
    m_dvListCtrlSvgDebuggerInfoDetail->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectSvgDebuggerInfoDetail), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_scrollWinFile->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_scrollWinFile->Disconnect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1644->Disconnect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1644->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveLruList), NULL, this);
    m_btDefaultDir->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::selectDefaultDirectory), NULL, this);
    m_btCurrentFile->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::selectCurrentFile), NULL, this);
    m_staticText1647->Disconnect(wxEVT_ENTER_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_staticText1647->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveEnterFileManagerControl), NULL, this);
    m_dirCtrl->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(MainFrameBClass::dirCtrlChanged), NULL, this);
    m_dirCtrl->Disconnect(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, wxTreeEventHandler(MainFrameBClass::dirCtrlActivated), NULL, this);
    m_clearLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_tmpTraceInfo->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_speedX->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_speedY->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_speedZ->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_cmdDuration->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_xMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Disconnect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_button1473->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearProcessedSetterList), NULL, this);
    m_btRequestCtlConfig->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestCtlPins->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btRequestCtlErrorInfo->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerErrorInfoFromButton), NULL, this);
    m_zSlider->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::disableSlider), NULL, this);
    m_cbCurveLibResolution->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurveLibResolution), NULL, this);
    m_switchCoordType->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchCoordinateSystemType), NULL, this);
    m_switchMonitoing->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_gridDrawPane->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::gridDrawPane), NULL, this);
    m_traceDrawPane->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::traceDrawPane), NULL, this);
    m_clearDrawPane->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearDrawPane), NULL, this);
    m_cbDrawZoomFactor->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::zoomDrawPane), NULL, this);
    m_cbUpdateInterval->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::changeUpdateInterval), NULL, this);
    m_drawPane->Disconnect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintDrawPane), NULL, this);
    m_drawPane->Disconnect(wxEVT_MOTION, wxMouseEventHandler(MainFrameBClass::onMotionDrawPane), NULL, this);
    m_drawPane->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::onLeaveDrawPane), NULL, this);
    m_gridPosUnit->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectGridPosUnit), NULL, this);
    m_3D_Animate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::animate3D), NULL, this);
    m_3D_Refreh->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refresh3D), NULL, this);
    m_3D_Clear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clear3D), NULL, this);
    m_3D_Top->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_button2345->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::runOpenGLTest), NULL, this);
    m_planeSelect3D->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectedPlane3D), NULL, this);
    m_spin3DAngelX->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelX), NULL, this);
    m_spin3DAngelX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelX), NULL, this);
    m_spin3DAngelY->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelY), NULL, this);
    m_spin3DAngelY->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelY), NULL, this);
    m_spin3DAngelZ->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::spin3DAngelZ), NULL, this);
    m_spin3DAngelZ->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::update3DAngelZ), NULL, this);
    m_svgEmuOpenFileAsSource->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSource), NULL, this);
    m_svgEmuOpenFileAsSvg->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSvg), NULL, this);
    m_svgEmuReload->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuReload), NULL, this);
    m_svgEmuClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuClear), NULL, this);
    m_switchCoordTypeSvgOut->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchCoordinateSystemTypeSvgOut), NULL, this);
    m_svgEmuToggleOrigPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuToogleOriginalPath), NULL, this);
    m_svgEmuZoomHome->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomHome), NULL, this);
    m_svgEmuZoomMinus->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomMinus), NULL, this);
    m_svgEmuZoomPlus->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomPlus), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_svgEmuToggleWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleEmuWordWrapMode), NULL, this);
    m_stcEmuSource->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::emuContentRightDown), NULL, this);
    m_stcEmuSource->Disconnect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickEmuSource), NULL, this);
    m_openXmlTraceAsText->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openXMLTraceAsText), NULL, this);
    m_openXmlTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::OpenXmlTrace), NULL, this);
    m_copySvgTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copySvgTrace), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    this->Disconnect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Disconnect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Disconnect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Disconnect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveEmuOutput), NULL, this);
    this->Disconnect(m_miReinit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reinit), NULL, this);
    this->Disconnect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Disconnect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Disconnect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Disconnect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Disconnect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Disconnect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Disconnect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Disconnect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Disconnect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Disconnect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Disconnect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Disconnect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Disconnect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Disconnect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Disconnect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Disconnect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Disconnect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Disconnect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Disconnect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Disconnect(m_miRqtErrorInfo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorInfo), NULL, this);
    this->Disconnect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Disconnect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Disconnect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Disconnect(m_miReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Disconnect(m_miManuallyDissolveEndState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::dissolveEndSwitchStates), NULL, this);
    this->Disconnect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Disconnect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Disconnect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Disconnect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Disconnect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Disconnect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Disconnect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Disconnect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Disconnect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Disconnect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    
    m_auimgrMain->UnInit();
    delete m_auimgrMain;

    std::map<int, wxMenu*>::iterator menuIter = m_dropdownMenus.begin();
    for( ; menuIter != m_dropdownMenus.end(); ++menuIter ) {
        wxDELETE( menuIter->second );
    }
    m_dropdownMenus.clear();

    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_serialTimer->Stop();
    wxDELETE( m_serialTimer );

    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}


void MainFrameBClass::ShowAuiToolMenu(wxAuiToolBarEvent& event)
{
    event.Skip();
    if (event.IsDropDownClicked()) {
        wxAuiToolBar* toolbar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
        if (toolbar) {
            wxAuiToolBarItem* item = toolbar->FindTool(event.GetId());
            if (item) {
                std::map<int, wxMenu*>::iterator iter = m_dropdownMenus.find(item->GetId());
                if (iter != m_dropdownMenus.end()) {
                    event.Skip(false);
                    wxPoint pt = event.GetItemRect().GetBottomLeft();
                    pt.y++;
                    toolbar->PopupMenu(iter->second, pt);
                }
            }
        }
    }
}
PathGeneratorFrameBase::PathGeneratorFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    flexGridSizer980 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer980->SetFlexibleDirection( wxBOTH );
    flexGridSizer980->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer980->AddGrowableCol(0);
    flexGridSizer980->AddGrowableRow(2);
    this->SetSizer(flexGridSizer980);
    
    flexGridSizer973 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer973->SetFlexibleDirection( wxBOTH );
    flexGridSizer973->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer973->AddGrowableCol(0);
    flexGridSizer973->AddGrowableRow(0);
    
    flexGridSizer980->Add(flexGridSizer973, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgNotebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,100)), wxBK_DEFAULT);
    m_pgNotebook->SetName(wxT("m_pgNotebook"));
    
    flexGridSizer973->Add(m_pgNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelPolygon = new wxPanel(m_pgNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_pgNotebook->AddPage(m_panelPolygon, _("Polygon"), false);
    
    flexGridSizer1000 = new wxFlexGridSizer(2, 10, 0, 0);
    flexGridSizer1000->SetFlexibleDirection( wxBOTH );
    flexGridSizer1000->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panelPolygon->SetSizer(flexGridSizer1000);
    
    m_staticText1002 = new wxStaticText(m_panelPolygon, wxID_ANY, _("Radius [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_panelPolygon, wxSize(-1,-1)), 0);
    
    flexGridSizer1000->Add(m_staticText1002, 0, wxALL, WXC_FROM_DIP(5));
    
    m_polygonRadius = new wxTextCtrl(m_panelPolygon, wxID_ANY, wxT("80"), wxDefaultPosition, wxDLG_UNIT(m_panelPolygon, wxSize(60,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_polygonRadius->SetHint(wxT(""));
    #endif
    
    flexGridSizer1000->Add(m_polygonRadius, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1004 = new wxStaticText(m_panelPolygon, wxID_ANY, _("Section count [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_panelPolygon, wxSize(-1,-1)), 0);
    
    flexGridSizer1000->Add(m_staticText1004, 0, wxALL, WXC_FROM_DIP(5));
    
    m_polygonSections = new wxTextCtrl(m_panelPolygon, wxID_ANY, wxT("4"), wxDefaultPosition, wxDLG_UNIT(m_panelPolygon, wxSize(40,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_polygonSections->SetHint(wxT(""));
    #endif
    
    flexGridSizer1000->Add(m_polygonSections, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelKnob = new wxPanel(m_pgNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_pgNotebook->AddPage(m_panelKnob, _("Knob"), false);
    
    flexGridSizer10001 = new wxFlexGridSizer(2, 10, 0, 0);
    flexGridSizer10001->SetFlexibleDirection( wxBOTH );
    flexGridSizer10001->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panelKnob->SetSizer(flexGridSizer10001);
    
    m_staticText10022 = new wxStaticText(m_panelKnob, wxID_ANY, _("Radius [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_panelKnob, wxSize(-1,-1)), 0);
    
    flexGridSizer10001->Add(m_staticText10022, 0, wxALL, WXC_FROM_DIP(5));
    
    m_knobRadius = new wxTextCtrl(m_panelKnob, wxID_ANY, wxT("80"), wxDefaultPosition, wxDLG_UNIT(m_panelKnob, wxSize(60,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_knobRadius->SetHint(wxT(""));
    #endif
    
    flexGridSizer10001->Add(m_knobRadius, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText10044 = new wxStaticText(m_panelKnob, wxID_ANY, _("Section count [mm]:"), wxDefaultPosition, wxDLG_UNIT(m_panelKnob, wxSize(-1,-1)), 0);
    
    flexGridSizer10001->Add(m_staticText10044, 0, wxALL, WXC_FROM_DIP(5));
    
    m_knobSections = new wxTextCtrl(m_panelKnob, wxID_ANY, wxT("4"), wxDefaultPosition, wxDLG_UNIT(m_panelKnob, wxSize(40,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_knobSections->SetHint(wxT(""));
    #endif
    
    flexGridSizer10001->Add(m_knobSections, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelGear = new wxPanel(m_pgNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_pgNotebook->AddPage(m_panelGear, _("Gear"), false);
    m_pgNotebook->SetMinSize(wxSize(-1,100));
    
    flexGridSizer986 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer986->SetFlexibleDirection( wxBOTH );
    flexGridSizer986->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer973->Add(flexGridSizer986, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btPGGenerate = new wxButton(this, wxID_ANY, _("Generate"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btPGGenerate->SetDefault();
    
    flexGridSizer986->Add(m_btPGGenerate, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btPGCopy = new wxButton(this, wxID_ANY, _("Copy"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer986->Add(m_btPGCopy, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btPGClose = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer986->Add(m_btPGClose, 0, wxALL, WXC_FROM_DIP(1));
    
    m_generatedPath = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_generatedPath->SetHint(wxT(""));
    #endif
    
    flexGridSizer980->Add(m_generatedPath, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    #if wxUSE_WEBVIEW
    m_pgPreview = wxWebView::New(this, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer980->Add(m_pgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_pgNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_pgNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_pgNotebook);
    }
    #endif
    
    SetName(wxT("PathGeneratorFrameBase"));
    SetMinClientSize(wxSize(500,300));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    m_btPGGenerate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGCopy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    
}

PathGeneratorFrameBase::~PathGeneratorFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    m_btPGGenerate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGCopy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    
}

EndSwitchDialogBase::EndSwitchDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    flexGridSizer1529 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1529->SetFlexibleDirection( wxBOTH );
    flexGridSizer1529->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer1529);
    
    flexGridSizer1531 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer1531->SetFlexibleDirection( wxBOTH );
    flexGridSizer1531->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1531->AddGrowableCol(0);
    flexGridSizer1531->AddGrowableRow(2);
    
    flexGridSizer1529->Add(flexGridSizer1531, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_limitInfo = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,100)), wxTE_READONLY|wxTE_MULTILINE);
    m_limitInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1531->Add(m_limitInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_limitInfo->SetMinSize(wxSize(-1,100));
    
    m_staticText1547 = new wxStaticText(this, wxID_ANY, _("Manually end switch definition:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText1547Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1547Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1547->SetFont(m_staticText1547Font);
    
    flexGridSizer1531->Add(m_staticText1547, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer1533 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer1533->SetFlexibleDirection( wxBOTH );
    flexGridSizer1533->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1533->AddGrowableCol(0);
    flexGridSizer1533->AddGrowableCol(1);
    flexGridSizer1533->AddGrowableCol(2);
    flexGridSizer1533->AddGrowableRow(0);
    
    flexGridSizer1531->Add(flexGridSizer1533, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_XAxisEndSwitchBoxArr;
    m_XAxisEndSwitchBoxArr.Add(_("Min switch"));
    m_XAxisEndSwitchBoxArr.Add(_("Max switch"));
    m_XAxisEndSwitchBox = new wxRadioBox(this, wxID_ANY, _("X Axis"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_XAxisEndSwitchBoxArr, 1, 0);
    m_XAxisEndSwitchBox->SetSelection(0);
    
    flexGridSizer1533->Add(m_XAxisEndSwitchBox, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_YAxisEndSwitchBoxArr;
    m_YAxisEndSwitchBoxArr.Add(_("Min switch"));
    m_YAxisEndSwitchBoxArr.Add(_("Max switch"));
    m_YAxisEndSwitchBox = new wxRadioBox(this, wxID_ANY, _("Y Axis"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_YAxisEndSwitchBoxArr, 1, 0);
    m_YAxisEndSwitchBox->SetSelection(0);
    
    flexGridSizer1533->Add(m_YAxisEndSwitchBox, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_ZAxisEndSwitchBoxArr;
    m_ZAxisEndSwitchBoxArr.Add(_("Min switch"));
    m_ZAxisEndSwitchBoxArr.Add(_("Max switch"));
    m_ZAxisEndSwitchBox = new wxRadioBox(this, wxID_ANY, _("Z Axis"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_ZAxisEndSwitchBoxArr, 1, 0);
    m_ZAxisEndSwitchBox->SetSelection(0);
    
    flexGridSizer1533->Add(m_ZAxisEndSwitchBox, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btDissolveX = new wxButton(this, wxID_ANY, _("Dissolve X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer1533->Add(m_btDissolveX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btDissolveY = new wxButton(this, wxID_ANY, _("Dissolve Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer1533->Add(m_btDissolveY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btDissolveZ = new wxButton(this, wxID_ANY, _("Dissolve Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer1533->Add(m_btDissolveZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer1535 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1535->SetFlexibleDirection( wxBOTH );
    flexGridSizer1535->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1531->Add(flexGridSizer1535, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_btCancle = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer1535->Add(m_btCancle, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("EndSwitchDialogBase"));
    SetMinClientSize(wxSize(400,320));
    SetSize(400,320);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_XAxisEndSwitchBox->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectX), NULL, this);
    m_YAxisEndSwitchBox->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectY), NULL, this);
    m_ZAxisEndSwitchBox->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectZ), NULL, this);
    m_btDissolveX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveX), NULL, this);
    m_btDissolveY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveY), NULL, this);
    m_btDissolveZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveZ), NULL, this);
    m_btCancle->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::cancle), NULL, this);
    
}

EndSwitchDialogBase::~EndSwitchDialogBase()
{
    m_XAxisEndSwitchBox->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectX), NULL, this);
    m_YAxisEndSwitchBox->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectY), NULL, this);
    m_ZAxisEndSwitchBox->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(EndSwitchDialogBase::selectZ), NULL, this);
    m_btDissolveX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveX), NULL, this);
    m_btDissolveY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveY), NULL, this);
    m_btDissolveZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::dissolveZ), NULL, this);
    m_btCancle->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EndSwitchDialogBase::cancle), NULL, this);
    
}

ImageLib16::ImageLib16()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("ANIMATION_SPRITE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("ANIMATION_SPRITE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_BOTTOM_TOP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_BOTTOM_TOP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_TOP_BOTTOM"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_TOP_BOTTOM"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_MINIMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_MINIMAL"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_MINIMAL@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_MINIMAL@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_NORMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_NORMAL"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_NORMAL@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_NORMAL@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D@2x"), bmp));
        }
    }
    
}

ImageLib16::~ImageLib16()
{
}

ImageLib24::ImageLib24()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_GREEN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_GREEN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_RED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_RED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_YELLOW"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_YELLOW"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_RELEASE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_RELEASE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_RELEASE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_RELEASE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_DEBUG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_DEBUG"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_DEBUG@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_DEBUG@2x"), bmp));
        }
    }
    
}

ImageLib24::~ImageLib24()
{
}

ImageLibBig::ImageLibBig()
    : wxImageList(1024, 1024, true)
    , m_imagesWidth(1024)
    , m_imagesHeight(1024)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CNC"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CNC"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MILL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MILL"), bmp));
        }
    }
    
}

ImageLibBig::~ImageLibBig()
{
}
