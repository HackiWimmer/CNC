//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterPodestManagement.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterPodestManagement.h"


// Declare the bitmap loading function
extern void wxC9ED9XXInitBitmapResources();

static bool bBitmapLoaded = false;


CncPodestManagementBase::CncPodestManagementBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9XXInitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-sort"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer9548 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer9548->SetFlexibleDirection( wxBOTH );
    flexGridSizer9548->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9548->AddGrowableCol(0);
    flexGridSizer9548->AddGrowableRow(0);
    flexGridSizer9548->SetMinSize(250,250);
    this->SetSizer(flexGridSizer9548);
    
    m_basePanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer9548->Add(m_basePanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer9561 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer9561->SetFlexibleDirection( wxBOTH );
    flexGridSizer9561->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9561->AddGrowableCol(0);
    flexGridSizer9561->AddGrowableRow(0);
    m_basePanel->SetSizer(flexGridSizer9561);
    
    wxFlexGridSizer* flexGridSizer9543 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer9543->SetFlexibleDirection( wxBOTH );
    flexGridSizer9543->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9543->AddGrowableCol(0);
    flexGridSizer9543->AddGrowableRow(0);
    flexGridSizer9543->AddGrowableRow(1);
    
    flexGridSizer9561->Add(flexGridSizer9543, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btUp = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-up@2x")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btUp->SetToolTip(_("Move Podest Up"));
    
    flexGridSizer9543->Add(m_btUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btDown = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-down@2x")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btDown->SetToolTip(_("Move Podest Down"));
    
    flexGridSizer9543->Add(m_btDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine9554 = new wxStaticLine(m_basePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer9561->Add(m_staticLine9554, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer9562 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer9562->SetFlexibleDirection( wxBOTH );
    flexGridSizer9562->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9562->AddGrowableCol(1);
    flexGridSizer9562->AddGrowableRow(0);
    
    flexGridSizer9561->Add(flexGridSizer9562, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_info = new wxStaticBitmap(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-info@2x")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0 );
    
    flexGridSizer9562->Add(m_info, 0, wxALL, WXC_FROM_DIP(0));
    
    m_button9552 = new wxButton(m_basePanel, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button9552->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("window-close-3")), wxLEFT);
    m_button9552->SetBitmapMargins(2,2);
    #endif
    wxFont m_button9552Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_button9552->SetFont(m_button9552Font);
    
    flexGridSizer9562->Add(m_button9552, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(500, true);
    
    SetName(wxT("CncPodestManagementBase"));
    SetMinClientSize(wxSize(250,250));
    SetSize(wxDLG_UNIT(this, wxSize(250,250)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_btUp->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftDown), NULL, this);
    m_btUp->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftUp), NULL, this);
    m_btDown->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftDown), NULL, this);
    m_btDown->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftUp), NULL, this);
    m_info->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onLefDownInfo), NULL, this);
    m_button9552->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onClose), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncPodestManagementBase::onStartupTimer), NULL, this);
    
}

CncPodestManagementBase::~CncPodestManagementBase()
{
    m_btUp->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftDown), NULL, this);
    m_btUp->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftUp), NULL, this);
    m_btDown->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftDown), NULL, this);
    m_btDown->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftUp), NULL, this);
    m_info->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onLefDownInfo), NULL, this);
    m_button9552->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onClose), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncPodestManagementBase::onStartupTimer), NULL, this);
    
    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

}
