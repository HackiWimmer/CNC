//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterPodestManagement.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterPodestManagement.h"


// Declare the bitmap loading function
extern void wxC9ED9XXInitBitmapResources();

static bool bBitmapLoaded = false;


CncPodestManagementBase::CncPodestManagementBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9XXInitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-sort"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer9548 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer9548->SetFlexibleDirection( wxBOTH );
    flexGridSizer9548->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9548->AddGrowableCol(0);
    flexGridSizer9548->AddGrowableRow(0);
    flexGridSizer9548->SetMinSize(540,300);
    this->SetSizer(flexGridSizer9548);
    
    m_basePanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_basePanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    flexGridSizer9548->Add(m_basePanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer9572 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer9572->SetFlexibleDirection( wxBOTH );
    flexGridSizer9572->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9572->AddGrowableCol(0);
    flexGridSizer9572->AddGrowableRow(0);
    m_basePanel->SetSizer(flexGridSizer9572);
    
    wxFlexGridSizer* flexGridSizer9567 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer9567->SetFlexibleDirection( wxBOTH );
    flexGridSizer9567->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9567->AddGrowableCol(0);
    flexGridSizer9567->AddGrowableCol(2);
    flexGridSizer9567->AddGrowableCol(4);
    flexGridSizer9567->AddGrowableRow(0);
    
    flexGridSizer9572->Add(flexGridSizer9567, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticBitmap9569 = new wxStaticBitmap(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("lift")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0 );
    
    flexGridSizer9567->Add(m_staticBitmap9569, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticLine9571 = new wxStaticLine(m_basePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer9567->Add(m_staticLine9571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer95431 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer95431->SetFlexibleDirection( wxBOTH );
    flexGridSizer95431->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer95431->AddGrowableCol(0);
    flexGridSizer95431->AddGrowableRow(1);
    flexGridSizer95431->AddGrowableRow(2);
    
    flexGridSizer9567->Add(flexGridSizer95431, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer9600 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer9600->SetFlexibleDirection( wxBOTH );
    flexGridSizer9600->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9600->AddGrowableCol(0);
    
    flexGridSizer95431->Add(flexGridSizer9600, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_moveRelative = new wxTextCtrl(m_basePanel, wxID_ANY, wxT("99.999"), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(64,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_moveRelative->SetHint(wxT(""));
    #endif
    
    flexGridSizer9600->Add(m_moveRelative, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    m_moveRelative->SetMinSize(wxSize(64,-1));
    
    m_staticText9611 = new wxStaticText(m_basePanel, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0);
    wxFont m_staticText9611Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText9611->SetFont(m_staticText9611Font);
    
    flexGridSizer9600->Add(m_staticText9611, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btRelativeUp = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("podestRelativeUp")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btRelativeUp->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer95431->Add(m_btRelativeUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btRelativeDown = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("podestRelativeDown")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btRelativeDown->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer95431->Add(m_btRelativeDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine95714 = new wxStaticLine(m_basePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer9567->Add(m_staticLine95714, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer9543 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer9543->SetFlexibleDirection( wxBOTH );
    flexGridSizer9543->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9543->AddGrowableCol(0);
    flexGridSizer9543->AddGrowableRow(1);
    flexGridSizer9543->AddGrowableRow(2);
    
    flexGridSizer9567->Add(flexGridSizer9543, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer9609 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer9609->SetFlexibleDirection( wxBOTH );
    flexGridSizer9609->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9609->AddGrowableCol(0);
    flexGridSizer9609->AddGrowableRow(0);
    
    flexGridSizer9543->Add(flexGridSizer9609, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_textCtrl9604 = new wxTextCtrl(m_basePanel, wxID_ANY, wxT("Freehand"), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_textCtrl9604Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_textCtrl9604->SetFont(m_textCtrl9604Font);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl9604->SetHint(wxT(""));
    #endif
    
    flexGridSizer9609->Add(m_textCtrl9604, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btManuallyUp = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("podestManuallyUp")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btManuallyUp->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    
    flexGridSizer9543->Add(m_btManuallyUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btManuallyDown = new wxBitmapButton(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("podestManuallyDown")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btManuallyDown->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    
    flexGridSizer9543->Add(m_btManuallyDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine9554 = new wxStaticLine(m_basePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer9572->Add(m_staticLine9554, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer9562 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer9562->SetFlexibleDirection( wxBOTH );
    flexGridSizer9562->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer9562->AddGrowableCol(1);
    flexGridSizer9562->AddGrowableRow(0);
    
    flexGridSizer9572->Add(flexGridSizer9562, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_info = new wxStaticBitmap(m_basePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-info@2x")), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0 );
    
    flexGridSizer9562->Add(m_info, 0, wxALL, WXC_FROM_DIP(0));
    
    m_btClose = new wxButton(m_basePanel, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(m_basePanel, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("window-close-3")), wxLEFT);
    m_btClose->SetBitmapMargins(2,2);
    #endif
    wxFont m_btCloseFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btClose->SetFont(m_btCloseFont);
    
    flexGridSizer9562->Add(m_btClose, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    SetName(wxT("CncPodestManagementBase"));
    SetMinClientSize(wxSize(540,300));
    SetSize(wxDLG_UNIT(this, wxSize(540,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncPodestManagementBase::onShow), NULL, this);
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncPodestManagementBase::onInit), NULL, this);
    m_btRelativeUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onPodestRelativeUp), NULL, this);
    m_btRelativeDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onPodestRelativeDown), NULL, this);
    m_btManuallyUp->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftDown), NULL, this);
    m_btManuallyUp->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftUp), NULL, this);
    m_btManuallyUp->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeave), NULL, this);
    m_btManuallyDown->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftDown), NULL, this);
    m_btManuallyDown->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftUp), NULL, this);
    m_btManuallyDown->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeave), NULL, this);
    m_info->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onLefDownInfo), NULL, this);
    m_btClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onClose), NULL, this);
    
}

CncPodestManagementBase::~CncPodestManagementBase()
{
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncPodestManagementBase::onShow), NULL, this);
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncPodestManagementBase::onInit), NULL, this);
    m_btRelativeUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onPodestRelativeUp), NULL, this);
    m_btRelativeDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onPodestRelativeDown), NULL, this);
    m_btManuallyUp->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftDown), NULL, this);
    m_btManuallyUp->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeftUp), NULL, this);
    m_btManuallyUp->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncPodestManagementBase::onPodestUpLeave), NULL, this);
    m_btManuallyDown->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftDown), NULL, this);
    m_btManuallyDown->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeftUp), NULL, this);
    m_btManuallyDown->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncPodestManagementBase::onPodestDownLeave), NULL, this);
    m_info->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncPodestManagementBase::onLefDownInfo), NULL, this);
    m_btClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncPodestManagementBase::onClose), NULL, this);
    
}
