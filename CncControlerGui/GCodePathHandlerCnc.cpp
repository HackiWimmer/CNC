#include "CncControl.h"
#include "CncPosition.h"
#include "GCodePathHandlerCnc.h"

//////////////////////////////////////////////////////////////////
GCodePathHandlerCnc::GCodePathHandlerCnc(CncControl* cnc) 
: GCodePathHandlerBase	()
, CncPathListRunner		(cnc)
, phBegPosition			(0, 0, 0)
{
//////////////////////////////////////////////////////////////////
	changeInputUnit(Unit::mm);
	
	// add the file parser to the runner setup
	// the rest is already set by CncPathListRunner(cnc)
	CncPathListRunner::Setup& setup = getSetup();
	setup.fileParser		= fileParser;
}
//////////////////////////////////////////////////////////////////
GCodePathHandlerCnc::~GCodePathHandlerCnc() {
//////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::prepareWorkImpl() {
//////////////////////////////////////////////////////////////////
	// log current position
	phBegPosition = getSetup().cnc->getCurCtlPos();
	return true;
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::finishWorkImpl() {
//////////////////////////////////////////////////////////////////
	// controller handling#
	#warning switchToolOff();
	getSetup().cnc->switchToolOff();
	getSetup().cnc->changeCurrentFeedSpeedXYZ_MM_MIN(THE_CONFIG->getDefaultRapidSpeed_MM_MIN(), CncSpeedRapid);
	
	getSetup().cnc->moveToPos(phBegPosition);
	currentPos.set(getSetup().cnc->getCurCtlPosMetric());
	return true;
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::initNextPath() {
//////////////////////////////////////////////////////////////////
	// execute path list
	if ( onPhysicallyExecute(pathListMgr) == false )
		return false;

	// default processing
	if ( PathHandlerBase::initNextPath() == false )
		return false;

	Serial::Trigger::NextPath tr;
	getSetup().cnc->processTrigger(tr);
	
	return true;
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerCnc::switchToolState(bool state) {
//////////////////////////////////////////////////////////////////
	CncPathListRunner::onPhysicallySwitchToolState(state);
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::processDwellIntern(int64_t microseconds) {
//////////////////////////////////////////////////////////////////
	processWait(microseconds);
	return true;
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerCnc::initNextClientId(long id) {
//////////////////////////////////////////////////////////////////
	processClientId(id);
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::changeCurrentFeedSpeedXYZ(CncSpeedMode s, double value) {
//////////////////////////////////////////////////////////////////
	processSpeed(s, value);
	return true;
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::processLinearMove(bool alreadyRendered) {
//////////////////////////////////////////////////////////////////
	const CncPathListEntry& cpe = pathListMgr.addEntryAbs(currentPos.getX(), currentPos.getY(), currentPos.getZ(), alreadyRendered);
	logNextPathListEntry(cpe);
	
	return true;
}
